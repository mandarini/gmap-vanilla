{"version":3,"sources":["node_modules/browser-pack/_prelude.js","app/scripts/clickListeners.ts","app/scripts/main.ts","bundle.js","app/scripts/map.ts","app/scripts/mapscript.ts","app/scripts/styledMap.ts"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","1","module","Object","defineProperty","value","map","drawing","document","getElementById","drawing_buttons","name","img","loadAllDrawingButtons","forEach","btn","parent","type","img_btn","createElement","id","concat","tabIndex","setAttribute","src","addEventListener","ev","clearAll","draw","appendChild","createImgButton","2","mapscript_1","clickListeners","map_1","initMap","google","maps","Map","zoom","scrollwheel","panControl","mapTypeControl","zoomControl","streetViewControl","scaleControl","zoomControlOptions","style","ZoomControlStyle","LARGE","position","ControlPosition","RIGHT_BOTTOM","FunWithMaps","listenersForControlButtons","window","loadMapScript","event","./mapscript","3","london","drawingManager","drawingLayer","styledMap","allOverlays","x","y","LatLng","coords","darkmap","StyledMapType","setCenter","mapTypes","set","setMapTypeId","controls","LEFT_TOP","push","LEFT_BOTTOM","TOP_RIGHT","DrawingManager","console","log","addListener","overlay","setMap","add","Data","Feature","geometry","Polygon","getPath","getArray","data","bounds","getBounds","points","getSouthWest","lat","lng","getNorthEast","LineString","properties","radius","getRadius","Point","getCenter","getPosition","listenForDrawing","./styledMap","4","libraries","script","body","elementType","stylers","color","visibility","featureType"],"mappings":"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","file":"bundle.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","import * as map from \"./map\";\n\nconst drawing = document.getElementById(\"drawingControls\");\nconst drawing_buttons = [\n  {\n    name: \"marker\",\n    img: \"point\"\n  },\n  {\n    name: \"polygon\",\n    img: \"polygon\"\n  },\n  {\n    name: \"square\",\n    img: \"square\"\n  },\n  {\n    name: \"circle\",\n    img: \"circle\"\n  },\n  {\n    name: \"polyline\",\n    img: \"line\"\n  },\n  {\n    name: \"cat\",\n    img: \"cat\"\n  },\n  {\n    name: \"pan\",\n    img: \"pan\"\n  },\n  {\n    name: \"save\",\n    img: \"save\"\n  },\n  {\n    name: \"clear\",\n    img: \"clear\"\n  }\n];\n\nconst city_buttons = [\n  {\n    name: \"lon\"\n  }\n];\n\nexport function loadAllDrawingButtons() {\n  drawing_buttons.forEach((btn: { name: string; img: string }) => {\n    createImgButton(btn, drawing, btn.name === \"clear\" ? \"clear\" : \"draw\");\n  });\n}\n\nfunction createImgButton(\n  btn: { name: string; img: string },\n  parent: HTMLElement,\n  type: string\n) {\n  const img_btn = document.createElement(\"img\");\n  img_btn.id = `${btn.name}-control`;\n  img_btn.tabIndex = 0;\n  img_btn.setAttribute(\"role\", \"button\");\n  if (type === \"clear\") {\n    img_btn.src = `assets/img/${btn.img}.svg`;\n    img_btn.addEventListener(\"click\", (ev: MouseEvent) => {\n      map.clearAll();\n    });\n  } else {\n    img_btn.src = `assets/img/${btn.img}.png`;\n    img_btn.addEventListener(\"click\", (ev: MouseEvent) => {\n      map.draw(btn.name);\n    });\n  }\n  parent.appendChild(img_btn);\n}\n","/// <reference types=\"@types/markerclustererplus\" />\n\nimport { loadMapScript } from \"./mapscript\";\n// import { RegisterSW } from \"./sw-reg\";\nimport * as clickListeners from \"./clickListeners\";\nimport { FunWithMaps } from \"./map\";\nimport {} from \"google-maps\";\n\n// RegisterSW();\nclickListeners.loadAllDrawingButtons();\nclickListeners.listenersForControlButtons();\n\nlet map: google.maps.Map;\n\nif (window[\"google\"] && window[\"google\"][\"maps\"]) {\n  initMap();\n} else {\n  loadMapScript(\"geometry,drawing,visualization\", (event: Event) => {\n    initMap();\n  });\n}\n\nfunction initMap() {\n  map = new google.maps.Map(document.getElementById(\"map\"), {\n    zoom: 11,\n    scrollwheel: true,\n    panControl: false,\n    mapTypeControl: false,\n    zoomControl: true,\n    streetViewControl: false,\n    scaleControl: true,\n    zoomControlOptions: {\n      style: google.maps.ZoomControlStyle.LARGE,\n      position: google.maps.ControlPosition.RIGHT_BOTTOM\n    }\n  });\n  FunWithMaps(map);\n}\n","(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst map = require(\"./map\");\nconst drawing = document.getElementById(\"drawingControls\");\nconst drawing_buttons = [\n    {\n        name: \"marker\",\n        img: \"point\"\n    },\n    {\n        name: \"polygon\",\n        img: \"polygon\"\n    },\n    {\n        name: \"square\",\n        img: \"square\"\n    },\n    {\n        name: \"circle\",\n        img: \"circle\"\n    },\n    {\n        name: \"polyline\",\n        img: \"line\"\n    },\n    {\n        name: \"cat\",\n        img: \"cat\"\n    },\n    {\n        name: \"pan\",\n        img: \"pan\"\n    },\n    {\n        name: \"save\",\n        img: \"save\"\n    },\n    {\n        name: \"clear\",\n        img: \"clear\"\n    }\n];\nconst city_buttons = [\n    {\n        name: \"lon\"\n    }\n];\nfunction loadAllDrawingButtons() {\n    drawing_buttons.forEach((btn) => {\n        createImgButton(btn, drawing, btn.name === \"clear\" ? \"clear\" : \"draw\");\n    });\n}\nexports.loadAllDrawingButtons = loadAllDrawingButtons;\nfunction createImgButton(btn, parent, type) {\n    const img_btn = document.createElement(\"img\");\n    img_btn.id = `${btn.name}-control`;\n    img_btn.tabIndex = 0;\n    img_btn.setAttribute(\"role\", \"button\");\n    if (type === \"clear\") {\n        img_btn.src = `assets/img/${btn.img}.svg`;\n        img_btn.addEventListener(\"click\", (ev) => {\n            map.clearAll();\n        });\n    }\n    else {\n        img_btn.src = `assets/img/${btn.img}.png`;\n        img_btn.addEventListener(\"click\", (ev) => {\n            map.draw(btn.name);\n        });\n    }\n    parent.appendChild(img_btn);\n}\n\n},{\"./map\":3}],2:[function(require,module,exports){\n\"use strict\";\n/// <reference types=\"@types/markerclustererplus\" />\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst mapscript_1 = require(\"./mapscript\");\n// import { RegisterSW } from \"./sw-reg\";\nconst clickListeners = require(\"./clickListeners\");\nconst map_1 = require(\"./map\");\n// RegisterSW();\nclickListeners.loadAllDrawingButtons();\nclickListeners.listenersForControlButtons();\nlet map;\nif (window[\"google\"] && window[\"google\"][\"maps\"]) {\n    initMap();\n}\nelse {\n    mapscript_1.loadMapScript(\"geometry,drawing,visualization\", (event) => {\n        initMap();\n    });\n}\nfunction initMap() {\n    map = new google.maps.Map(document.getElementById(\"map\"), {\n        zoom: 11,\n        scrollwheel: true,\n        panControl: false,\n        mapTypeControl: false,\n        zoomControl: true,\n        streetViewControl: false,\n        scaleControl: true,\n        zoomControlOptions: {\n            style: google.maps.ZoomControlStyle.LARGE,\n            position: google.maps.ControlPosition.RIGHT_BOTTOM\n        }\n    });\n    map_1.FunWithMaps(map);\n}\n\n},{\"./clickListeners\":1,\"./map\":3,\"./mapscript\":4}],3:[function(require,module,exports){\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst styledMap = require(\"./styledMap\");\nlet london;\nlet infoWindow;\nlet markerClusterer;\nlet heatmap;\nlet drawingManager;\nlet allOverlays = [];\nlet drawingLayer;\nlet otherGeoJson;\nlet lettings;\nlet masts;\nlet markers = [];\nlet showLonely = false;\nlet clust_num;\nlet prevalence;\nlet dark_theme = true;\nlet mastsVisible = false;\nlet clustersVisible = false;\nlet heatmapVisible = false;\nlet heatmap_radius = 20;\nlet viewReady = false;\nfunction FunWithMaps(map) {\n    london = coords(51.561638, -0.14);\n    let darkmap = new google.maps.StyledMapType(styledMap.styledMap, {\n        name: \"Dark Map\"\n    });\n    map.setCenter(london);\n    map.mapTypes.set(\"dark_map\", darkmap);\n    map.setMapTypeId(\"dark_map\");\n    map.controls[google.maps.ControlPosition.LEFT_TOP].push(document.getElementById(\"controls\"));\n    map.controls[google.maps.ControlPosition.LEFT_BOTTOM].push(document.getElementById(\"legend\"));\n    map.controls[google.maps.ControlPosition.TOP_RIGHT].push(document.getElementById(\"drawingControls\"));\n    map.controls[google.maps.ControlPosition.RIGHT_BOTTOM].push(document.getElementById(\"katlink\"));\n    drawingManager = new google.maps.drawing.DrawingManager;\n    console.log(map);\n    listenForDrawing(map, drawingManager);\n}\nexports.FunWithMaps = FunWithMaps;\nfunction coords(x, y) {\n    return new google.maps.LatLng(x, y);\n}\n// @ViewChild(\"mapElement\", { static: false }) mapElm: ElementRef;\n// @ViewChild(\"legend\", { static: false }) legend: ElementRef;\n// @ViewChild(\"controls\", { static: false }) controls: ElementRef;\n// @ViewChild(\"drawingControls\", { static: false }) drawingControls: ElementRef;\n// @ViewChild(\"link\", { static: false }) katlink: ElementRef;\n//   drawingManager = new google.maps.drawing.DrawingManager({\n//     drawingMode: null,\n//     drawingControl: false // i have my custom tools so i don't need the defaults to be displayed\n//   });\n//   drawingManager.setMap(map);\n//   drawingLayer = new google.maps.Data();\n//   listenForDrawing(map, drawingManager);\n//   // loadAllMarkers(map);\n//   // loadGeoJson(map);\n//   // loadHeatmapData();\n//   // viewReady = true;\n// }\n// loadHeatmapData() {\n//   data\n//     .loadAsset(\"assets/data/letting.json\")\n//     .then((data: { meta: {}; data: string[][] }) => {\n//       lettings = data.data;\n//       let heatmapData = [];\n//       lettings.map((x: string[]) => {\n//         if (x[24] && x[23]) {\n//           heatmapData.push({\n//             location: new google.maps.LatLng(\n//               parseFloat(x[24]),\n//               parseFloat(x[23])\n//             ),\n//             weight: parseInt(x[15], 10)\n//           });\n//         }\n//       });\n//       heatmap = new google.maps.visualization.HeatmapLayer({\n//         data: heatmapData\n//       });\n//       heatmap.set(\"gradient\", customGradient);\n//       heatmap.set(\"radius\", 40);\n//       heatmap.set(\"opacity\", 1);\n//     })\n//     .catch(error => {\n//       console.log(error);\n//     });\n// }\n// loadGeoJson(map: google.maps.Map) {\n//   map.data.loadGeoJson(\"assets/data/lonely.geojson\");\n//   map.data.addListener(\"mouseover\", e => {\n//     showLonely = true;\n//     prevalence = e.feature.getProperty(\"PREVALENCE\");\n//   });\n//   map.data.addListener(\"mouseout\", e => {\n//     showLonely = false;\n//   });\n//   map.data.setStyle(feature => {\n//     let lon = feature.getProperty(\"PREVALENCE\");\n//     let value = 255 - Math.round(mapNumber(lon, 0, 5, 0, 255));\n//     let color = \"rgb(\" + value + \",\" + value + \",\" + 0 + \")\";\n//     return {\n//       fillColor: color,\n//       strokeWeight: 1\n//     };\n//   });\n//   infoWindow = new google.maps.InfoWindow();\n//   map.data.addListener(\"click\", e => {\n//     infoWindow.setPosition(e.latLng);\n//     infoWindow.setContent(`<div class=\"overlay\">\n//     <p><b>Prevalence factor of Loneliness of those over the age of 65: </b>\n//       ${e.feature.getProperty(\"PREVALENCE\")}</p></div>`);\n//     infoWindow.open(map);\n//   });\n// }\n// loadAllMarkers(map: google.maps.Map): void {\n//   let antenna: google.maps.Icon = {\n//     url: \"assets/img/antennabl.png\",\n//     scaledSize: new google.maps.Size(40, 40)\n//   };\n//   data\n//     .loadAsset(\"assets/data/masts.json\")\n//     .then((masts: { meta: {}; data: string[][] }) => {\n//       masts = masts.data;\n//       masts.map((x: string[]) => {\n//         let marker = new google.maps.Marker({\n//           position: new google.maps.LatLng(\n//             parseFloat(x[18]),\n//             parseFloat(x[17])\n//           ),\n//           icon: antenna\n//         });\n//         infoWindow = new google.maps.InfoWindow();\n//         marker.addListener(\"click\", e => {\n//           infoWindow.setPosition(e.latLng);\n//           infoWindow.setContent(`<p>${x[14]}</p>`);\n//           infoWindow.open(map, marker);\n//         });\n//         markers.push(marker);\n//       });\n//     })\n//     .catch(error => {\n//       console.log(error, \"Error loading asset\");\n//     });\n// }\n// toggleMasts(): void {\n//   if (!mastsVisible) {\n//     markers.map(marker => {\n//       marker.setMap(map);\n//     });\n//   } else {\n//     markers.map(marker => {\n//       marker.setMap(null);\n//     });\n//   }\n//   mastsVisible = !mastsVisible;\n// }\n// toggleClusters(): void {\n//   if (!clustersVisible) {\n//     markerClusterer = new MarkerClusterer(map, markers, {\n//       imagePath: \"assets/img/m\"\n//     });\n//     markerClusterer.setGridSize(10);\n//   } else {\n//     markerClusterer.clearMarkers();\n//   }\n//   clustersVisible = !clustersVisible;\n// }\n// toggleHeatmap(): void {\n//   if (heatmapVisible) {\n//     heatmap.setMap(null);\n//   } else {\n//     heatmap.setMap(map);\n//   }\n//   heatmapVisible = !heatmapVisible;\n// }\n// changeCluster(): void {\n//   clustersVisible = true;\n//   if (markerClusterer) {\n//     markerClusterer.clearMarkers();\n//   }\n//   markerClusterer = new MarkerClusterer(map, markers, {\n//     imagePath: \"assets/img/m\"\n//   });\n//   markerClusterer.setGridSize(clust_num);\n// }\n// changed() {\n//   heatmap.set(\"radius\", heatmap_radius);\n// }\n// city(city: string) {\n//   if (city === \"lon\") {\n//     map.setCenter(coords(51.561638, -0.14));\n//   }\n//   if (city === \"man\") {\n//     map.setCenter(coords(53.52476717517185, -2.5434842249308414));\n//   }\n// }\n// changeType() {\n//   if (!dark_theme) {\n//     map.setMapTypeId(\"dark_map\");\n//   } else {\n//     map.setMapTypeId(\"roadmap\");\n//   }\n//   dark_theme = !dark_theme;\n// }\nfunction listenForDrawing(map, drawingManager) {\n    console.log(google, google.maps);\n    drawingManager.addListener(\"overlaycomplete\", event => {\n        allOverlays.push(event.overlay);\n        event.overlay.addListener(\"rightclick\", () => {\n            event.overlay.setMap(null);\n        });\n        switch (event.type) {\n            case \"polygon\":\n                drawingLayer.add(new google.maps.Data.Feature({\n                    geometry: new google.maps.Data.Polygon([\n                        event.overlay.getPath().getArray()\n                    ])\n                }));\n                /**\n                 * We could do this, here:\n                 *\n                 * drawingLayer.setMap(map);\n                 *\n                 * The reason we are not doing this,\n                 * is because we want to keep the custom icons\n                 * showing. And if we add the data layer on the map,\n                 * it will use the default.\n                 */\n                map.data.add(new google.maps.Data.Feature({\n                    geometry: new google.maps.Data.Polygon([\n                        event.overlay.getPath().getArray()\n                    ])\n                }));\n                break;\n            case \"rectangle\":\n                let bounds = event.overlay.getBounds();\n                let points = [\n                    bounds.getSouthWest(),\n                    {\n                        lat: bounds.getSouthWest().lat(),\n                        lng: bounds.getNorthEast().lng()\n                    },\n                    bounds.getNorthEast(),\n                    {\n                        lng: bounds.getSouthWest().lng(),\n                        lat: bounds.getNorthEast().lat()\n                    }\n                ];\n                drawingLayer.add(new google.maps.Data.Feature({\n                    geometry: new google.maps.Data.Polygon([points])\n                }));\n                map.data.add(new google.maps.Data.Feature({\n                    geometry: new google.maps.Data.Polygon([points])\n                }));\n                break;\n            case \"polyline\":\n                drawingLayer.add(new google.maps.Data.Feature({\n                    geometry: new google.maps.Data.LineString(event.overlay.getPath().getArray())\n                }));\n                map.data.add(new google.maps.Data.Feature({\n                    geometry: new google.maps.Data.LineString(event.overlay.getPath().getArray())\n                }));\n                break;\n            case \"circle\":\n                drawingLayer.add(new google.maps.Data.Feature({\n                    properties: {\n                        radius: event.overlay.getRadius()\n                    },\n                    geometry: new google.maps.Data.Point(event.overlay.getCenter())\n                }));\n                map.data.add(new google.maps.Data.Feature({\n                    properties: {\n                        radius: event.overlay.getRadius()\n                    }\n                }));\n                break;\n            case \"marker\":\n                drawingLayer.add(new google.maps.Data.Feature({\n                    geometry: new google.maps.Data.Point(event.overlay.getPosition())\n                }));\n                break;\n            default:\n                console.log(\"end\");\n        }\n    });\n}\n\n},{\"./styledMap\":5}],4:[function(require,module,exports){\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction loadMapScript(libraries, c) {\n    if (!document.getElementById(\"gmap\")) {\n        const script = document.createElement(\"script\");\n        script.type = \"text/javascript\";\n        script.src =\n            \"https://maps.googleapis.com/maps/api/js?key=AIzaSyCrJXi-qaWm9FtOLL0h3xO_kfORit6WS2s\";\n        if (libraries && libraries.length > 0) {\n            script.src = script.src + \"&libraries=\" + libraries;\n        }\n        script.id = \"gmap\";\n        script.addEventListener(\"load\", e => {\n            c(e);\n        }, false);\n        document.body.appendChild(script);\n    }\n}\nexports.loadMapScript = loadMapScript;\n\n},{}],5:[function(require,module,exports){\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.styledMap = [\n    { elementType: \"geometry\", stylers: [{ color: \"#9a9a9a\" }] },\n    { elementType: \"labels.text.fill\", stylers: [{ color: \"#111111\" }] },\n    { elementType: \"labels.text.stroke\", stylers: [{ visibility: \"off\" }] },\n    {\n        featureType: \"administrative\",\n        elementType: \"geometry.stroke\",\n        stylers: [{ color: \"#c8c8c8\" }]\n    },\n    {\n        featureType: \"administrative.land_parcel\",\n        elementType: \"geometry.stroke\",\n        stylers: [{ color: \"#c8c8c8\" }]\n    },\n    {\n        featureType: \"administrative.land_parcel\",\n        elementType: \"labels.text.fill\",\n        stylers: [{ color: \"#c8c8c8\" }]\n    },\n    {\n        featureType: \"landscape.natural\",\n        elementType: \"geometry\",\n        stylers: [{ color: \"#c8c8c8\" }]\n    },\n    {\n        featureType: \"poi\",\n        elementType: \"geometry\",\n        stylers: [{ color: \"#c8c8c8\" }]\n    },\n    {\n        featureType: \"poi\",\n        elementType: \"labels.text.fill\",\n        stylers: [{ color: \"#111111\" }, { visibility: \"simplified\" }]\n    },\n    {\n        featureType: \"poi.park\",\n        elementType: \"geometry.fill\",\n        stylers: [{ color: \"#c8c8c8\" }]\n    },\n    {\n        featureType: \"poi.park\",\n        elementType: \"labels.text.fill\",\n        stylers: [{ color: \"#111111\" }]\n    },\n    {\n        featureType: \"poi.business\",\n        stylers: [{ visibility: \"off\" }]\n    },\n    {\n        featureType: \"road\",\n        elementType: \"geometry\",\n        stylers: [{ color: \"#aaaaaa\" }]\n        // stylers: [{color: '#ff0000'}]\n    },\n    {\n        featureType: \"road.arterial\",\n        elementType: \"geometry\",\n        stylers: [{ color: \"#999999\" }]\n        // stylers: [{color: '#ff0000'}]\n    },\n    {\n        featureType: \"road.highway\",\n        elementType: \"geometry\",\n        stylers: [{ color: \"#666666\" }]\n        // stylers: [{color: '#ff0000'}]\n    },\n    {\n        featureType: \"road.highway\",\n        elementType: \"geometry.stroke\",\n        stylers: [{ visibility: \"off\" }]\n    },\n    {\n        featureType: \"road.highway.controlled_access\",\n        elementType: \"geometry\",\n        stylers: [{ color: \"#444444\" }]\n    },\n    {\n        featureType: \"road.highway.controlled_access\",\n        elementType: \"geometry.stroke\",\n        stylers: [{ visibility: \"off\" }]\n    },\n    {\n        featureType: \"road.local\",\n        elementType: \"labels.text.fill\",\n        stylers: [{ color: \"#111111\" }]\n    },\n    {\n        featureType: \"transit.line\",\n        elementType: \"geometry\",\n        stylers: [{ color: \"#c8c8c8\" }]\n    },\n    {\n        featureType: \"transit.line\",\n        elementType: \"labels.text.fill\",\n        stylers: [{ color: \"#111111\" }]\n    },\n    {\n        featureType: \"transit.line\",\n        elementType: \"labels.text.stroke\",\n        stylers: [{ visibility: \"off\" }]\n    },\n    {\n        featureType: \"transit.station\",\n        elementType: \"geometry\",\n        stylers: [{ color: \"#c8c8c8\" }]\n    },\n    {\n        featureType: \"water\",\n        elementType: \"geometry.fill\",\n        stylers: [{ color: \"#222222\" }]\n    },\n    {\n        featureType: \"water\",\n        elementType: \"labels.text.fill\",\n        stylers: [{ color: \"#222222\" }]\n    }\n];\n\n},{}]},{},[2])\n\n","/// <reference types=\"@types/markerclustererplus\" />\nimport {} from \"google-maps\";\nimport * as styledMap from \"./styledMap\";\n\nlet london: google.maps.LatLng;\nlet infoWindow: google.maps.InfoWindow;\nlet markerClusterer: MarkerClusterer;\nlet heatmap: google.maps.visualization.HeatmapLayer;\nlet drawingManager: google.maps.drawing.DrawingManager;\nlet allOverlays: any[] = [];\n\nlet drawingLayer: google.maps.Data;\n\nlet otherGeoJson: any;\n\nlet lettings: string[][];\nlet masts: string[][];\nlet markers: google.maps.Marker[] = [];\n\nlet showLonely: boolean = false;\nlet clust_num: number;\nlet prevalence: string;\n\nlet dark_theme: boolean = true;\nlet mastsVisible: boolean = false;\nlet clustersVisible: boolean = false;\nlet heatmapVisible: boolean = false;\n\nlet heatmap_radius: number = 20;\n\nlet viewReady: boolean = false;\n\nexport function FunWithMaps(map: google.maps.Map) {\n  london = coords(51.561638, -0.14);\n  let darkmap = new google.maps.StyledMapType(\n    styledMap.styledMap as google.maps.MapTypeStyle[],\n    {\n      name: \"Dark Map\"\n    }\n  );\n\n  map.setCenter(london);\n  map.mapTypes.set(\"dark_map\", darkmap);\n  map.setMapTypeId(\"dark_map\");\n\n  map.controls[google.maps.ControlPosition.LEFT_TOP].push(\n    document.getElementById(\"controls\")\n  );\n  map.controls[google.maps.ControlPosition.LEFT_BOTTOM].push(\n    document.getElementById(\"legend\")\n  );\n  map.controls[google.maps.ControlPosition.TOP_RIGHT].push(\n    document.getElementById(\"drawingControls\")\n  );\n  map.controls[google.maps.ControlPosition.RIGHT_BOTTOM].push(\n    document.getElementById(\"katlink\")\n  );\n  drawingManager = new google.maps.drawing.DrawingManager;\n\n  console.log(map);\n  listenForDrawing(map, drawingManager);\n}\n\nfunction coords(x: number, y: number) {\n  return new google.maps.LatLng(x, y);\n}\n\n// @ViewChild(\"mapElement\", { static: false }) mapElm: ElementRef;\n// @ViewChild(\"legend\", { static: false }) legend: ElementRef;\n// @ViewChild(\"controls\", { static: false }) controls: ElementRef;\n// @ViewChild(\"drawingControls\", { static: false }) drawingControls: ElementRef;\n// @ViewChild(\"link\", { static: false }) katlink: ElementRef;\n\n//   drawingManager = new google.maps.drawing.DrawingManager({\n//     drawingMode: null,\n//     drawingControl: false // i have my custom tools so i don't need the defaults to be displayed\n//   });\n//   drawingManager.setMap(map);\n//   drawingLayer = new google.maps.Data();\n//   listenForDrawing(map, drawingManager);\n\n//   // loadAllMarkers(map);\n//   // loadGeoJson(map);\n//   // loadHeatmapData();\n//   // viewReady = true;\n// }\n\n// loadHeatmapData() {\n//   data\n//     .loadAsset(\"assets/data/letting.json\")\n//     .then((data: { meta: {}; data: string[][] }) => {\n//       lettings = data.data;\n//       let heatmapData = [];\n//       lettings.map((x: string[]) => {\n//         if (x[24] && x[23]) {\n//           heatmapData.push({\n//             location: new google.maps.LatLng(\n//               parseFloat(x[24]),\n//               parseFloat(x[23])\n//             ),\n//             weight: parseInt(x[15], 10)\n//           });\n//         }\n//       });\n//       heatmap = new google.maps.visualization.HeatmapLayer({\n//         data: heatmapData\n//       });\n//       heatmap.set(\"gradient\", customGradient);\n//       heatmap.set(\"radius\", 40);\n//       heatmap.set(\"opacity\", 1);\n//     })\n//     .catch(error => {\n//       console.log(error);\n//     });\n// }\n\n// loadGeoJson(map: google.maps.Map) {\n//   map.data.loadGeoJson(\"assets/data/lonely.geojson\");\n//   map.data.addListener(\"mouseover\", e => {\n//     showLonely = true;\n//     prevalence = e.feature.getProperty(\"PREVALENCE\");\n//   });\n\n//   map.data.addListener(\"mouseout\", e => {\n//     showLonely = false;\n//   });\n//   map.data.setStyle(feature => {\n//     let lon = feature.getProperty(\"PREVALENCE\");\n//     let value = 255 - Math.round(mapNumber(lon, 0, 5, 0, 255));\n//     let color = \"rgb(\" + value + \",\" + value + \",\" + 0 + \")\";\n//     return {\n//       fillColor: color,\n//       strokeWeight: 1\n//     };\n//   });\n\n//   infoWindow = new google.maps.InfoWindow();\n//   map.data.addListener(\"click\", e => {\n//     infoWindow.setPosition(e.latLng);\n//     infoWindow.setContent(`<div class=\"overlay\">\n//     <p><b>Prevalence factor of Loneliness of those over the age of 65: </b>\n//       ${e.feature.getProperty(\"PREVALENCE\")}</p></div>`);\n//     infoWindow.open(map);\n//   });\n// }\n\n// loadAllMarkers(map: google.maps.Map): void {\n//   let antenna: google.maps.Icon = {\n//     url: \"assets/img/antennabl.png\",\n//     scaledSize: new google.maps.Size(40, 40)\n//   };\n//   data\n//     .loadAsset(\"assets/data/masts.json\")\n//     .then((masts: { meta: {}; data: string[][] }) => {\n//       masts = masts.data;\n//       masts.map((x: string[]) => {\n//         let marker = new google.maps.Marker({\n//           position: new google.maps.LatLng(\n//             parseFloat(x[18]),\n//             parseFloat(x[17])\n//           ),\n//           icon: antenna\n//         });\n//         infoWindow = new google.maps.InfoWindow();\n//         marker.addListener(\"click\", e => {\n//           infoWindow.setPosition(e.latLng);\n//           infoWindow.setContent(`<p>${x[14]}</p>`);\n//           infoWindow.open(map, marker);\n//         });\n//         markers.push(marker);\n//       });\n//     })\n//     .catch(error => {\n//       console.log(error, \"Error loading asset\");\n//     });\n// }\n\n// toggleMasts(): void {\n//   if (!mastsVisible) {\n//     markers.map(marker => {\n//       marker.setMap(map);\n//     });\n//   } else {\n//     markers.map(marker => {\n//       marker.setMap(null);\n//     });\n//   }\n//   mastsVisible = !mastsVisible;\n// }\n\n// toggleClusters(): void {\n//   if (!clustersVisible) {\n//     markerClusterer = new MarkerClusterer(map, markers, {\n//       imagePath: \"assets/img/m\"\n//     });\n//     markerClusterer.setGridSize(10);\n//   } else {\n//     markerClusterer.clearMarkers();\n//   }\n//   clustersVisible = !clustersVisible;\n// }\n\n// toggleHeatmap(): void {\n//   if (heatmapVisible) {\n//     heatmap.setMap(null);\n//   } else {\n//     heatmap.setMap(map);\n//   }\n//   heatmapVisible = !heatmapVisible;\n// }\n\n// changeCluster(): void {\n//   clustersVisible = true;\n//   if (markerClusterer) {\n//     markerClusterer.clearMarkers();\n//   }\n//   markerClusterer = new MarkerClusterer(map, markers, {\n//     imagePath: \"assets/img/m\"\n//   });\n//   markerClusterer.setGridSize(clust_num);\n// }\n\n// changed() {\n//   heatmap.set(\"radius\", heatmap_radius);\n// }\n\n// city(city: string) {\n//   if (city === \"lon\") {\n//     map.setCenter(coords(51.561638, -0.14));\n//   }\n//   if (city === \"man\") {\n//     map.setCenter(coords(53.52476717517185, -2.5434842249308414));\n//   }\n// }\n\n// changeType() {\n//   if (!dark_theme) {\n//     map.setMapTypeId(\"dark_map\");\n//   } else {\n//     map.setMapTypeId(\"roadmap\");\n//   }\n//   dark_theme = !dark_theme;\n// }\n\nfunction listenForDrawing(\n  map: google.maps.Map,\n  drawingManager: google.maps.drawing.DrawingManager\n) {\n  console.log(google, google.maps);\n  drawingManager.addListener(\"overlaycomplete\", event => {\n    allOverlays.push(event.overlay);\n    event.overlay.addListener(\"rightclick\", () => {\n      event.overlay.setMap(null);\n    });\n    switch (event.type) {\n      case \"polygon\":\n        drawingLayer.add(\n          new google.maps.Data.Feature({\n            geometry: new google.maps.Data.Polygon([\n              event.overlay.getPath().getArray()\n            ])\n          })\n        );\n\n        /**\n         * We could do this, here:\n         *\n         * drawingLayer.setMap(map);\n         *\n         * The reason we are not doing this,\n         * is because we want to keep the custom icons\n         * showing. And if we add the data layer on the map,\n         * it will use the default.\n         */\n\n        map.data.add(\n          new google.maps.Data.Feature({\n            geometry: new google.maps.Data.Polygon([\n              event.overlay.getPath().getArray()\n            ])\n          })\n        );\n        break;\n      case \"rectangle\":\n        let bounds = event.overlay.getBounds();\n        let points = [\n          bounds.getSouthWest(),\n          {\n            lat: bounds.getSouthWest().lat(),\n            lng: bounds.getNorthEast().lng()\n          },\n          bounds.getNorthEast(),\n          {\n            lng: bounds.getSouthWest().lng(),\n            lat: bounds.getNorthEast().lat()\n          }\n        ];\n        drawingLayer.add(\n          new google.maps.Data.Feature({\n            geometry: new google.maps.Data.Polygon([points])\n          })\n        );\n\n        map.data.add(\n          new google.maps.Data.Feature({\n            geometry: new google.maps.Data.Polygon([points])\n          })\n        );\n        break;\n      case \"polyline\":\n        drawingLayer.add(\n          new google.maps.Data.Feature({\n            geometry: new google.maps.Data.LineString(\n              event.overlay.getPath().getArray()\n            )\n          })\n        );\n\n        map.data.add(\n          new google.maps.Data.Feature({\n            geometry: new google.maps.Data.LineString(\n              event.overlay.getPath().getArray()\n            )\n          })\n        );\n        break;\n      case \"circle\":\n        drawingLayer.add(\n          new google.maps.Data.Feature({\n            properties: {\n              radius: event.overlay.getRadius()\n            },\n            geometry: new google.maps.Data.Point(event.overlay.getCenter())\n          })\n        );\n\n        map.data.add(\n          new google.maps.Data.Feature({\n            properties: {\n              radius: event.overlay.getRadius()\n            }\n          })\n        );\n        break;\n      case \"marker\":\n        drawingLayer.add(\n          new google.maps.Data.Feature({\n            geometry: new google.maps.Data.Point(event.overlay.getPosition())\n          })\n        );\n        break;\n      default:\n        console.log(\"end\");\n    }\n  });\n}\n","export function loadMapScript(libraries: string, c: Function): void {\n  if (!document.getElementById(\"gmap\")) {\n    const script = document.createElement(\"script\");\n    script.type = \"text/javascript\";\n    script.src =\n      \"https://maps.googleapis.com/maps/api/js?key=AIzaSyCrJXi-qaWm9FtOLL0h3xO_kfORit6WS2s\";\n    if (libraries && libraries.length > 0) {\n      script.src = script.src + \"&libraries=\" + libraries;\n    }\n    script.id = \"gmap\";\n    script.addEventListener(\n      \"load\",\n      e => {\n        c(e);\n      },\n      false\n    );\n    document.body.appendChild(script);\n  }\n}\n","export const styledMap = [\n  { elementType: \"geometry\", stylers: [{ color: \"#9a9a9a\" }] },\n  { elementType: \"labels.text.fill\", stylers: [{ color: \"#111111\" }] },\n  { elementType: \"labels.text.stroke\", stylers: [{ visibility: \"off\" }] },\n  {\n    featureType: \"administrative\",\n    elementType: \"geometry.stroke\",\n    stylers: [{ color: \"#c8c8c8\" }]\n  },\n  {\n    featureType: \"administrative.land_parcel\",\n    elementType: \"geometry.stroke\",\n    stylers: [{ color: \"#c8c8c8\" }]\n  },\n  {\n    featureType: \"administrative.land_parcel\",\n    elementType: \"labels.text.fill\",\n    stylers: [{ color: \"#c8c8c8\" }]\n  },\n  {\n    featureType: \"landscape.natural\",\n    elementType: \"geometry\",\n    stylers: [{ color: \"#c8c8c8\" }]\n  },\n  {\n    featureType: \"poi\",\n    elementType: \"geometry\",\n    stylers: [{ color: \"#c8c8c8\" }]\n  },\n  {\n    featureType: \"poi\",\n    elementType: \"labels.text.fill\",\n    stylers: [{ color: \"#111111\" }, { visibility: \"simplified\" }]\n  },\n  {\n    featureType: \"poi.park\",\n    elementType: \"geometry.fill\",\n    stylers: [{ color: \"#c8c8c8\" }]\n  },\n  {\n    featureType: \"poi.park\",\n    elementType: \"labels.text.fill\",\n    stylers: [{ color: \"#111111\" }]\n  },\n  {\n    featureType: \"poi.business\",\n    stylers: [{ visibility: \"off\" }]\n  },\n  {\n    featureType: \"road\",\n    elementType: \"geometry\",\n    stylers: [{ color: \"#aaaaaa\" }]\n    // stylers: [{color: '#ff0000'}]\n  },\n  {\n    featureType: \"road.arterial\",\n    elementType: \"geometry\",\n    stylers: [{ color: \"#999999\" }]\n    // stylers: [{color: '#ff0000'}]\n  },\n  {\n    featureType: \"road.highway\",\n    elementType: \"geometry\",\n    stylers: [{ color: \"#666666\" }]\n    // stylers: [{color: '#ff0000'}]\n  },\n  {\n    featureType: \"road.highway\",\n    elementType: \"geometry.stroke\",\n    stylers: [{ visibility: \"off\" }]\n  },\n  {\n    featureType: \"road.highway.controlled_access\",\n    elementType: \"geometry\",\n    stylers: [{ color: \"#444444\" }]\n  },\n  {\n    featureType: \"road.highway.controlled_access\",\n    elementType: \"geometry.stroke\",\n    stylers: [{ visibility: \"off\" }]\n  },\n  {\n    featureType: \"road.local\",\n    elementType: \"labels.text.fill\",\n    stylers: [{ color: \"#111111\" }]\n  },\n  {\n    featureType: \"transit.line\",\n    elementType: \"geometry\",\n    stylers: [{ color: \"#c8c8c8\" }]\n  },\n  {\n    featureType: \"transit.line\",\n    elementType: \"labels.text.fill\",\n    stylers: [{ color: \"#111111\" }]\n  },\n  {\n    featureType: \"transit.line\",\n    elementType: \"labels.text.stroke\",\n    stylers: [{ visibility: \"off\" }]\n  },\n  {\n    featureType: \"transit.station\",\n    elementType: \"geometry\",\n    stylers: [{ color: \"#c8c8c8\" }]\n  },\n  {\n    featureType: \"water\",\n    elementType: \"geometry.fill\",\n    stylers: [{ color: \"#222222\" }]\n  },\n  {\n    featureType: \"water\",\n    elementType: \"labels.text.fill\",\n    stylers: [{ color: \"#222222\" }]\n  }\n];\n"]}