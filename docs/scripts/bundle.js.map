{"version":3,"sources":["node_modules/browser-pack/_prelude.js","app/scripts/main.ts","app/scripts/map.ts","bundle.js","app/scripts/mapscript.ts","app/scripts/styledMap.ts","app/scripts/sw-reg.ts"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","1","module","Object","defineProperty","value","map","mapscript_1","sw_reg_1","map_1","RegisterSW","initMap","google","maps","Map","document","getElementById","zoom","scrollwheel","panControl","mapTypeControl","zoomControl","streetViewControl","scaleControl","zoomControlOptions","style","ZoomControlStyle","LARGE","position","ControlPosition","RIGHT_BOTTOM","FunWithMaps","drawing","DrawingManager","drawingMode","drawingControl","setMap","Data","window","loadMapScript","draggable","./sw-reg","2","london","drawingLayer","styledMap","allOverlays","x","y","LatLng","coords","darkmap","StyledMapType","name","setCenter","mapTypes","set","setMapTypeId","controls","LEFT_TOP","push","LEFT_BOTTOM","TOP_RIGHT","drawingManager","event","addListener","overlay","type","add","Feature","geometry","Polygon","getPath","getArray","data","bounds","getBounds","points","getSouthWest","lat","lng","getNorthEast","LineString","properties","radius","getRadius","Point","getCenter","getPosition","console","log","listenForDrawing","./styledMap","3","libraries","script","createElement","src","id","addEventListener","head","appendChild","elementType","stylers","color","visibility","featureType","5","navigator","serviceWorker","register","scope"],"mappings":"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","file":"bundle.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","/// <reference types=\"@types/markerclustererplus\" />\n\nimport { loadMapScript } from \"./mapscript\";\nimport { RegisterSW } from \"./sw-reg\";\nimport { FunWithMaps } from \"./map\";\nimport {} from \"google-maps\";\n\nRegisterSW();\n\nlet map: google.maps.Map;\nlet drawingManager: google.maps.drawing.DrawingManager;\nlet allOverlays: any[] = [];\n\nlet drawingLayer: google.maps.Data;\nif (window[\"google\"] && window[\"google\"][\"maps\"]) {\n  initMap();\n} else {\n  loadMapScript(\"\", () => {\n    initMap();\n  });\n}\n\nfunction initMap() {\n  map = new google.maps.Map(document.getElementById(\"map\"), {\n    zoom: 10,\n    scrollwheel: true,\n    panControl: false,\n    mapTypeControl: false,\n    zoomControl: true,\n    streetViewControl: false,\n    scaleControl: true,\n    zoomControlOptions: {\n      style: google.maps.ZoomControlStyle.LARGE,\n      position: google.maps.ControlPosition.RIGHT_BOTTOM\n    }\n  });\n  FunWithMaps(map);\n  drawingManager = new google.maps.drawing.DrawingManager({\n    drawingMode: null,\n    drawingControl: false // i have my custom tools so i don't need the defaults to be displayed\n  });\n  drawingManager.setMap(map);\n  drawingLayer = new google.maps.Data();\n}\n\nfunction draw(type: string) {\n  switch (type) {\n    case \"marker\":\n      drawingManager.setDrawingMode(google.maps.drawing.OverlayType.MARKER);\n      let point: google.maps.Icon = {\n        url: \"assets/img/point.png\",\n        scaledSize: new google.maps.Size(30, 30)\n      };\n\n      drawingManager.setOptions({\n        markerOptions: {\n          icon: point,\n          clickable: true,\n          draggable: true\n        }\n      });\n      break;\n    case \"cat\":\n      drawingManager.setDrawingMode(google.maps.drawing.OverlayType.MARKER);\n      let cat: google.maps.Icon = {\n        url: \"assets/img/cat.png\",\n        scaledSize: new google.maps.Size(70, 70)\n      };\n      drawingManager.setOptions({\n        markerOptions: {\n          icon: cat,\n          clickable: true,\n          draggable: true\n        }\n      });\n      break;\n    case \"polygon\":\n      drawingManager.setDrawingMode(google.maps.drawing.OverlayType.POLYGON);\n      drawingManager.setOptions({\n        polygonOptions: {\n          fillColor: \"#9c4d4f\",\n          fillOpacity: 0.5,\n          strokeWeight: 2,\n          strokeColor: \"#401619\",\n          clickable: true,\n          editable: true,\n          draggable: true\n        }\n      });\n      break;\n    case \"square\":\n      drawingManager.setDrawingMode(google.maps.drawing.OverlayType.RECTANGLE);\n      drawingManager.setOptions({\n        rectangleOptions: {\n          fillColor: \"#fff82e\",\n          fillOpacity: 0.5,\n          strokeWeight: 2,\n          strokeColor: \"#c8a535\",\n          clickable: true,\n          editable: true,\n          draggable: true\n        }\n      });\n      break;\n    case \"polyline\":\n      drawingManager.setDrawingMode(google.maps.drawing.OverlayType.POLYLINE);\n      drawingManager.setOptions({\n        polylineOptions: {\n          strokeWeight: 2,\n          strokeColor: \"#00b801\",\n          clickable: true,\n          editable: true,\n          draggable: true\n        }\n      });\n      break;\n    case \"circle\":\n      drawingManager.setDrawingMode(google.maps.drawing.OverlayType.CIRCLE);\n      drawingManager.setOptions({\n        circleOptions: {\n          fillColor: \"#00b801\",\n          fillOpacity: 0.5,\n          strokeWeight: 2,\n          strokeColor: \"#00b801\",\n          clickable: true,\n          editable: true,\n          draggable: true\n        }\n      });\n      break;\n    case \"pan\":\n      drawingManager.setDrawingMode(null);\n      break;\n    case \"save\":\n      drawingManager.setDrawingMode(null);\n      drawingLayer.toGeoJson(obj => {\n        console.log(obj);\n        download(JSON.stringify(obj), \"drawingData.txt\");\n      });\n      break;\n    default:\n      drawingManager.setDrawingMode(null);\n  }\n}\n\nfunction download(content: string, fileName: string) {\n  let a = document.createElement(\"a\");\n  let file = new Blob([content], { type: \"text/plain\" });\n  a.href = URL.createObjectURL(file);\n  a.download = fileName;\n  a.click();\n}\n\nfunction clearAll() {\n  allOverlays.map(overlay => {\n    overlay.setMap(null);\n  });\n  drawingLayer.setMap(null);\n  drawingLayer = new google.maps.Data();\n  allOverlays = [];\n}\n","/// <reference types=\"@types/markerclustererplus\" />\nimport {} from \"google-maps\";\nimport * as styledMap from \"./styledMap\";\n\nlet london: google.maps.LatLng;\nlet infoWindow: google.maps.InfoWindow;\nlet markerClusterer: MarkerClusterer;\nlet heatmap: google.maps.visualization.HeatmapLayer;\nlet drawingManager: google.maps.drawing.DrawingManager;\nlet allOverlays: any[] = [];\n\nlet drawingLayer: google.maps.Data;\n\nlet otherGeoJson: any;\n\nlet lettings: string[][];\nlet masts: string[][];\nlet markers: google.maps.Marker[] = [];\n\nlet showLonely: boolean = false;\nlet clust_num: number;\nlet prevalence: string;\n\nlet dark_theme: boolean = true;\nlet mastsVisible: boolean = false;\nlet clustersVisible: boolean = false;\nlet heatmapVisible: boolean = false;\n\nlet heatmap_radius: number = 20;\n\nlet viewReady: boolean = false;\n\nexport function FunWithMaps(map: google.maps.Map) {\n  london = coords(51.561638, -0.14);\n  let darkmap = new google.maps.StyledMapType(\n    styledMap.styledMap as google.maps.MapTypeStyle[],\n    {\n      name: \"Dark Map\"\n    }\n  );\n\n  map.setCenter(london);\n  map.mapTypes.set(\"dark_map\", darkmap);\n  map.setMapTypeId(\"dark_map\");\n\n  map.controls[google.maps.ControlPosition.LEFT_TOP].push(\n    document.getElementById(\"controls\")\n  );\n  map.controls[google.maps.ControlPosition.LEFT_BOTTOM].push(\n    document.getElementById(\"legend\")\n  );\n  map.controls[google.maps.ControlPosition.TOP_RIGHT].push(\n    document.getElementById(\"drawingControls\")\n  );\n  map.controls[google.maps.ControlPosition.RIGHT_BOTTOM].push(\n    document.getElementById(\"katlink\")\n  );\n\n  listenForDrawing(map, drawingManager);\n}\n\nfunction coords(x: number, y: number) {\n  return new google.maps.LatLng(x, y);\n}\n\n// @ViewChild(\"mapElement\", { static: false }) mapElm: ElementRef;\n// @ViewChild(\"legend\", { static: false }) legend: ElementRef;\n// @ViewChild(\"controls\", { static: false }) controls: ElementRef;\n// @ViewChild(\"drawingControls\", { static: false }) drawingControls: ElementRef;\n// @ViewChild(\"link\", { static: false }) katlink: ElementRef;\n\n//   drawingManager = new google.maps.drawing.DrawingManager({\n//     drawingMode: null,\n//     drawingControl: false // i have my custom tools so i don't need the defaults to be displayed\n//   });\n//   drawingManager.setMap(map);\n//   drawingLayer = new google.maps.Data();\n//   listenForDrawing(map, drawingManager);\n\n//   // loadAllMarkers(map);\n//   // loadGeoJson(map);\n//   // loadHeatmapData();\n//   // viewReady = true;\n// }\n\n// loadHeatmapData() {\n//   data\n//     .loadAsset(\"assets/data/letting.json\")\n//     .then((data: { meta: {}; data: string[][] }) => {\n//       lettings = data.data;\n//       let heatmapData = [];\n//       lettings.map((x: string[]) => {\n//         if (x[24] && x[23]) {\n//           heatmapData.push({\n//             location: new google.maps.LatLng(\n//               parseFloat(x[24]),\n//               parseFloat(x[23])\n//             ),\n//             weight: parseInt(x[15], 10)\n//           });\n//         }\n//       });\n//       heatmap = new google.maps.visualization.HeatmapLayer({\n//         data: heatmapData\n//       });\n//       heatmap.set(\"gradient\", customGradient);\n//       heatmap.set(\"radius\", 40);\n//       heatmap.set(\"opacity\", 1);\n//     })\n//     .catch(error => {\n//       console.log(error);\n//     });\n// }\n\n// loadGeoJson(map: google.maps.Map) {\n//   map.data.loadGeoJson(\"assets/data/lonely.geojson\");\n//   map.data.addListener(\"mouseover\", e => {\n//     showLonely = true;\n//     prevalence = e.feature.getProperty(\"PREVALENCE\");\n//   });\n\n//   map.data.addListener(\"mouseout\", e => {\n//     showLonely = false;\n//   });\n//   map.data.setStyle(feature => {\n//     let lon = feature.getProperty(\"PREVALENCE\");\n//     let value = 255 - Math.round(mapNumber(lon, 0, 5, 0, 255));\n//     let color = \"rgb(\" + value + \",\" + value + \",\" + 0 + \")\";\n//     return {\n//       fillColor: color,\n//       strokeWeight: 1\n//     };\n//   });\n\n//   infoWindow = new google.maps.InfoWindow();\n//   map.data.addListener(\"click\", e => {\n//     infoWindow.setPosition(e.latLng);\n//     infoWindow.setContent(`<div class=\"overlay\">\n//     <p><b>Prevalence factor of Loneliness of those over the age of 65: </b>\n//       ${e.feature.getProperty(\"PREVALENCE\")}</p></div>`);\n//     infoWindow.open(map);\n//   });\n// }\n\n// loadAllMarkers(map: google.maps.Map): void {\n//   let antenna: google.maps.Icon = {\n//     url: \"assets/img/antennabl.png\",\n//     scaledSize: new google.maps.Size(40, 40)\n//   };\n//   data\n//     .loadAsset(\"assets/data/masts.json\")\n//     .then((masts: { meta: {}; data: string[][] }) => {\n//       masts = masts.data;\n//       masts.map((x: string[]) => {\n//         let marker = new google.maps.Marker({\n//           position: new google.maps.LatLng(\n//             parseFloat(x[18]),\n//             parseFloat(x[17])\n//           ),\n//           icon: antenna\n//         });\n//         infoWindow = new google.maps.InfoWindow();\n//         marker.addListener(\"click\", e => {\n//           infoWindow.setPosition(e.latLng);\n//           infoWindow.setContent(`<p>${x[14]}</p>`);\n//           infoWindow.open(map, marker);\n//         });\n//         markers.push(marker);\n//       });\n//     })\n//     .catch(error => {\n//       console.log(error, \"Error loading asset\");\n//     });\n// }\n\n// toggleMasts(): void {\n//   if (!mastsVisible) {\n//     markers.map(marker => {\n//       marker.setMap(map);\n//     });\n//   } else {\n//     markers.map(marker => {\n//       marker.setMap(null);\n//     });\n//   }\n//   mastsVisible = !mastsVisible;\n// }\n\n// toggleClusters(): void {\n//   if (!clustersVisible) {\n//     markerClusterer = new MarkerClusterer(map, markers, {\n//       imagePath: \"assets/img/m\"\n//     });\n//     markerClusterer.setGridSize(10);\n//   } else {\n//     markerClusterer.clearMarkers();\n//   }\n//   clustersVisible = !clustersVisible;\n// }\n\n// toggleHeatmap(): void {\n//   if (heatmapVisible) {\n//     heatmap.setMap(null);\n//   } else {\n//     heatmap.setMap(map);\n//   }\n//   heatmapVisible = !heatmapVisible;\n// }\n\n// changeCluster(): void {\n//   clustersVisible = true;\n//   if (markerClusterer) {\n//     markerClusterer.clearMarkers();\n//   }\n//   markerClusterer = new MarkerClusterer(map, markers, {\n//     imagePath: \"assets/img/m\"\n//   });\n//   markerClusterer.setGridSize(clust_num);\n// }\n\n// changed() {\n//   heatmap.set(\"radius\", heatmap_radius);\n// }\n\n// city(city: string) {\n//   if (city === \"lon\") {\n//     map.setCenter(coords(51.561638, -0.14));\n//   }\n//   if (city === \"man\") {\n//     map.setCenter(coords(53.52476717517185, -2.5434842249308414));\n//   }\n// }\n\n// changeType() {\n//   if (!dark_theme) {\n//     map.setMapTypeId(\"dark_map\");\n//   } else {\n//     map.setMapTypeId(\"roadmap\");\n//   }\n//   dark_theme = !dark_theme;\n// }\n\nfunction listenForDrawing(\n  map: google.maps.Map,\n  drawingManager: google.maps.drawing.DrawingManager\n) {\n  google.maps.event.addListener(drawingManager, \"overlaycomplete\", event => {\n    allOverlays.push(event.overlay);\n    event.overlay.addListener(\"rightclick\", () => {\n      event.overlay.setMap(null);\n    });\n    switch (event.type) {\n      case \"polygon\":\n        drawingLayer.add(\n          new google.maps.Data.Feature({\n            geometry: new google.maps.Data.Polygon([\n              event.overlay.getPath().getArray()\n            ])\n          })\n        );\n\n        /**\n         * We could do this, here:\n         *\n         * drawingLayer.setMap(map);\n         *\n         * The reason we are not doing this,\n         * is because we want to keep the custom icons\n         * showing. And if we add the data layer on the map,\n         * it will use the default.\n         */\n\n        map.data.add(\n          new google.maps.Data.Feature({\n            geometry: new google.maps.Data.Polygon([\n              event.overlay.getPath().getArray()\n            ])\n          })\n        );\n        break;\n      case \"rectangle\":\n        let bounds = event.overlay.getBounds();\n        let points = [\n          bounds.getSouthWest(),\n          {\n            lat: bounds.getSouthWest().lat(),\n            lng: bounds.getNorthEast().lng()\n          },\n          bounds.getNorthEast(),\n          {\n            lng: bounds.getSouthWest().lng(),\n            lat: bounds.getNorthEast().lat()\n          }\n        ];\n        drawingLayer.add(\n          new google.maps.Data.Feature({\n            geometry: new google.maps.Data.Polygon([points])\n          })\n        );\n\n        map.data.add(\n          new google.maps.Data.Feature({\n            geometry: new google.maps.Data.Polygon([points])\n          })\n        );\n        break;\n      case \"polyline\":\n        drawingLayer.add(\n          new google.maps.Data.Feature({\n            geometry: new google.maps.Data.LineString(\n              event.overlay.getPath().getArray()\n            )\n          })\n        );\n\n        map.data.add(\n          new google.maps.Data.Feature({\n            geometry: new google.maps.Data.LineString(\n              event.overlay.getPath().getArray()\n            )\n          })\n        );\n        break;\n      case \"circle\":\n        drawingLayer.add(\n          new google.maps.Data.Feature({\n            properties: {\n              radius: event.overlay.getRadius()\n            },\n            geometry: new google.maps.Data.Point(event.overlay.getCenter())\n          })\n        );\n\n        map.data.add(\n          new google.maps.Data.Feature({\n            properties: {\n              radius: event.overlay.getRadius()\n            }\n          })\n        );\n        break;\n      case \"marker\":\n        drawingLayer.add(\n          new google.maps.Data.Feature({\n            geometry: new google.maps.Data.Point(event.overlay.getPosition())\n          })\n        );\n        break;\n      default:\n        console.log(\"end\");\n    }\n  });\n}\n","(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){\n\"use strict\";\n/// <reference types=\"@types/markerclustererplus\" />\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst mapscript_1 = require(\"./mapscript\");\nconst sw_reg_1 = require(\"./sw-reg\");\nconst map_1 = require(\"./map\");\nsw_reg_1.RegisterSW();\nlet map;\nlet drawingManager;\nlet allOverlays = [];\nlet drawingLayer;\nif (window[\"google\"] && window[\"google\"][\"maps\"]) {\n    initMap();\n}\nelse {\n    mapscript_1.loadMapScript(\"\", () => {\n        initMap();\n    });\n}\nfunction initMap() {\n    map = new google.maps.Map(document.getElementById(\"map\"), {\n        zoom: 10,\n        scrollwheel: true,\n        panControl: false,\n        mapTypeControl: false,\n        zoomControl: true,\n        streetViewControl: false,\n        scaleControl: true,\n        zoomControlOptions: {\n            style: google.maps.ZoomControlStyle.LARGE,\n            position: google.maps.ControlPosition.RIGHT_BOTTOM\n        }\n    });\n    map_1.FunWithMaps(map);\n    drawingManager = new google.maps.drawing.DrawingManager({\n        drawingMode: null,\n        drawingControl: false // i have my custom tools so i don't need the defaults to be displayed\n    });\n    drawingManager.setMap(map);\n    drawingLayer = new google.maps.Data();\n}\nfunction draw(type) {\n    switch (type) {\n        case \"marker\":\n            drawingManager.setDrawingMode(google.maps.drawing.OverlayType.MARKER);\n            let point = {\n                url: \"assets/img/point.png\",\n                scaledSize: new google.maps.Size(30, 30)\n            };\n            drawingManager.setOptions({\n                markerOptions: {\n                    icon: point,\n                    clickable: true,\n                    draggable: true\n                }\n            });\n            break;\n        case \"cat\":\n            drawingManager.setDrawingMode(google.maps.drawing.OverlayType.MARKER);\n            let cat = {\n                url: \"assets/img/cat.png\",\n                scaledSize: new google.maps.Size(70, 70)\n            };\n            drawingManager.setOptions({\n                markerOptions: {\n                    icon: cat,\n                    clickable: true,\n                    draggable: true\n                }\n            });\n            break;\n        case \"polygon\":\n            drawingManager.setDrawingMode(google.maps.drawing.OverlayType.POLYGON);\n            drawingManager.setOptions({\n                polygonOptions: {\n                    fillColor: \"#9c4d4f\",\n                    fillOpacity: 0.5,\n                    strokeWeight: 2,\n                    strokeColor: \"#401619\",\n                    clickable: true,\n                    editable: true,\n                    draggable: true\n                }\n            });\n            break;\n        case \"square\":\n            drawingManager.setDrawingMode(google.maps.drawing.OverlayType.RECTANGLE);\n            drawingManager.setOptions({\n                rectangleOptions: {\n                    fillColor: \"#fff82e\",\n                    fillOpacity: 0.5,\n                    strokeWeight: 2,\n                    strokeColor: \"#c8a535\",\n                    clickable: true,\n                    editable: true,\n                    draggable: true\n                }\n            });\n            break;\n        case \"polyline\":\n            drawingManager.setDrawingMode(google.maps.drawing.OverlayType.POLYLINE);\n            drawingManager.setOptions({\n                polylineOptions: {\n                    strokeWeight: 2,\n                    strokeColor: \"#00b801\",\n                    clickable: true,\n                    editable: true,\n                    draggable: true\n                }\n            });\n            break;\n        case \"circle\":\n            drawingManager.setDrawingMode(google.maps.drawing.OverlayType.CIRCLE);\n            drawingManager.setOptions({\n                circleOptions: {\n                    fillColor: \"#00b801\",\n                    fillOpacity: 0.5,\n                    strokeWeight: 2,\n                    strokeColor: \"#00b801\",\n                    clickable: true,\n                    editable: true,\n                    draggable: true\n                }\n            });\n            break;\n        case \"pan\":\n            drawingManager.setDrawingMode(null);\n            break;\n        case \"save\":\n            drawingManager.setDrawingMode(null);\n            drawingLayer.toGeoJson(obj => {\n                console.log(obj);\n                download(JSON.stringify(obj), \"drawingData.txt\");\n            });\n            break;\n        default:\n            drawingManager.setDrawingMode(null);\n    }\n}\nfunction download(content, fileName) {\n    let a = document.createElement(\"a\");\n    let file = new Blob([content], { type: \"text/plain\" });\n    a.href = URL.createObjectURL(file);\n    a.download = fileName;\n    a.click();\n}\nfunction clearAll() {\n    allOverlays.map(overlay => {\n        overlay.setMap(null);\n    });\n    drawingLayer.setMap(null);\n    drawingLayer = new google.maps.Data();\n    allOverlays = [];\n}\n\n},{\"./map\":2,\"./mapscript\":3,\"./sw-reg\":5}],2:[function(require,module,exports){\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst styledMap = require(\"./styledMap\");\nlet london;\nlet infoWindow;\nlet markerClusterer;\nlet heatmap;\nlet drawingManager;\nlet allOverlays = [];\nlet drawingLayer;\nlet otherGeoJson;\nlet lettings;\nlet masts;\nlet markers = [];\nlet showLonely = false;\nlet clust_num;\nlet prevalence;\nlet dark_theme = true;\nlet mastsVisible = false;\nlet clustersVisible = false;\nlet heatmapVisible = false;\nlet heatmap_radius = 20;\nlet viewReady = false;\nfunction FunWithMaps(map) {\n    london = coords(51.561638, -0.14);\n    let darkmap = new google.maps.StyledMapType(styledMap.styledMap, {\n        name: \"Dark Map\"\n    });\n    map.setCenter(london);\n    map.mapTypes.set(\"dark_map\", darkmap);\n    map.setMapTypeId(\"dark_map\");\n    map.controls[google.maps.ControlPosition.LEFT_TOP].push(document.getElementById(\"controls\"));\n    map.controls[google.maps.ControlPosition.LEFT_BOTTOM].push(document.getElementById(\"legend\"));\n    map.controls[google.maps.ControlPosition.TOP_RIGHT].push(document.getElementById(\"drawingControls\"));\n    map.controls[google.maps.ControlPosition.RIGHT_BOTTOM].push(document.getElementById(\"katlink\"));\n    listenForDrawing(map, drawingManager);\n}\nexports.FunWithMaps = FunWithMaps;\nfunction coords(x, y) {\n    return new google.maps.LatLng(x, y);\n}\n// @ViewChild(\"mapElement\", { static: false }) mapElm: ElementRef;\n// @ViewChild(\"legend\", { static: false }) legend: ElementRef;\n// @ViewChild(\"controls\", { static: false }) controls: ElementRef;\n// @ViewChild(\"drawingControls\", { static: false }) drawingControls: ElementRef;\n// @ViewChild(\"link\", { static: false }) katlink: ElementRef;\n//   drawingManager = new google.maps.drawing.DrawingManager({\n//     drawingMode: null,\n//     drawingControl: false // i have my custom tools so i don't need the defaults to be displayed\n//   });\n//   drawingManager.setMap(map);\n//   drawingLayer = new google.maps.Data();\n//   listenForDrawing(map, drawingManager);\n//   // loadAllMarkers(map);\n//   // loadGeoJson(map);\n//   // loadHeatmapData();\n//   // viewReady = true;\n// }\n// loadHeatmapData() {\n//   data\n//     .loadAsset(\"assets/data/letting.json\")\n//     .then((data: { meta: {}; data: string[][] }) => {\n//       lettings = data.data;\n//       let heatmapData = [];\n//       lettings.map((x: string[]) => {\n//         if (x[24] && x[23]) {\n//           heatmapData.push({\n//             location: new google.maps.LatLng(\n//               parseFloat(x[24]),\n//               parseFloat(x[23])\n//             ),\n//             weight: parseInt(x[15], 10)\n//           });\n//         }\n//       });\n//       heatmap = new google.maps.visualization.HeatmapLayer({\n//         data: heatmapData\n//       });\n//       heatmap.set(\"gradient\", customGradient);\n//       heatmap.set(\"radius\", 40);\n//       heatmap.set(\"opacity\", 1);\n//     })\n//     .catch(error => {\n//       console.log(error);\n//     });\n// }\n// loadGeoJson(map: google.maps.Map) {\n//   map.data.loadGeoJson(\"assets/data/lonely.geojson\");\n//   map.data.addListener(\"mouseover\", e => {\n//     showLonely = true;\n//     prevalence = e.feature.getProperty(\"PREVALENCE\");\n//   });\n//   map.data.addListener(\"mouseout\", e => {\n//     showLonely = false;\n//   });\n//   map.data.setStyle(feature => {\n//     let lon = feature.getProperty(\"PREVALENCE\");\n//     let value = 255 - Math.round(mapNumber(lon, 0, 5, 0, 255));\n//     let color = \"rgb(\" + value + \",\" + value + \",\" + 0 + \")\";\n//     return {\n//       fillColor: color,\n//       strokeWeight: 1\n//     };\n//   });\n//   infoWindow = new google.maps.InfoWindow();\n//   map.data.addListener(\"click\", e => {\n//     infoWindow.setPosition(e.latLng);\n//     infoWindow.setContent(`<div class=\"overlay\">\n//     <p><b>Prevalence factor of Loneliness of those over the age of 65: </b>\n//       ${e.feature.getProperty(\"PREVALENCE\")}</p></div>`);\n//     infoWindow.open(map);\n//   });\n// }\n// loadAllMarkers(map: google.maps.Map): void {\n//   let antenna: google.maps.Icon = {\n//     url: \"assets/img/antennabl.png\",\n//     scaledSize: new google.maps.Size(40, 40)\n//   };\n//   data\n//     .loadAsset(\"assets/data/masts.json\")\n//     .then((masts: { meta: {}; data: string[][] }) => {\n//       masts = masts.data;\n//       masts.map((x: string[]) => {\n//         let marker = new google.maps.Marker({\n//           position: new google.maps.LatLng(\n//             parseFloat(x[18]),\n//             parseFloat(x[17])\n//           ),\n//           icon: antenna\n//         });\n//         infoWindow = new google.maps.InfoWindow();\n//         marker.addListener(\"click\", e => {\n//           infoWindow.setPosition(e.latLng);\n//           infoWindow.setContent(`<p>${x[14]}</p>`);\n//           infoWindow.open(map, marker);\n//         });\n//         markers.push(marker);\n//       });\n//     })\n//     .catch(error => {\n//       console.log(error, \"Error loading asset\");\n//     });\n// }\n// toggleMasts(): void {\n//   if (!mastsVisible) {\n//     markers.map(marker => {\n//       marker.setMap(map);\n//     });\n//   } else {\n//     markers.map(marker => {\n//       marker.setMap(null);\n//     });\n//   }\n//   mastsVisible = !mastsVisible;\n// }\n// toggleClusters(): void {\n//   if (!clustersVisible) {\n//     markerClusterer = new MarkerClusterer(map, markers, {\n//       imagePath: \"assets/img/m\"\n//     });\n//     markerClusterer.setGridSize(10);\n//   } else {\n//     markerClusterer.clearMarkers();\n//   }\n//   clustersVisible = !clustersVisible;\n// }\n// toggleHeatmap(): void {\n//   if (heatmapVisible) {\n//     heatmap.setMap(null);\n//   } else {\n//     heatmap.setMap(map);\n//   }\n//   heatmapVisible = !heatmapVisible;\n// }\n// changeCluster(): void {\n//   clustersVisible = true;\n//   if (markerClusterer) {\n//     markerClusterer.clearMarkers();\n//   }\n//   markerClusterer = new MarkerClusterer(map, markers, {\n//     imagePath: \"assets/img/m\"\n//   });\n//   markerClusterer.setGridSize(clust_num);\n// }\n// changed() {\n//   heatmap.set(\"radius\", heatmap_radius);\n// }\n// city(city: string) {\n//   if (city === \"lon\") {\n//     map.setCenter(coords(51.561638, -0.14));\n//   }\n//   if (city === \"man\") {\n//     map.setCenter(coords(53.52476717517185, -2.5434842249308414));\n//   }\n// }\n// changeType() {\n//   if (!dark_theme) {\n//     map.setMapTypeId(\"dark_map\");\n//   } else {\n//     map.setMapTypeId(\"roadmap\");\n//   }\n//   dark_theme = !dark_theme;\n// }\nfunction listenForDrawing(map, drawingManager) {\n    google.maps.event.addListener(drawingManager, \"overlaycomplete\", event => {\n        allOverlays.push(event.overlay);\n        event.overlay.addListener(\"rightclick\", () => {\n            event.overlay.setMap(null);\n        });\n        switch (event.type) {\n            case \"polygon\":\n                drawingLayer.add(new google.maps.Data.Feature({\n                    geometry: new google.maps.Data.Polygon([\n                        event.overlay.getPath().getArray()\n                    ])\n                }));\n                /**\n                 * We could do this, here:\n                 *\n                 * drawingLayer.setMap(map);\n                 *\n                 * The reason we are not doing this,\n                 * is because we want to keep the custom icons\n                 * showing. And if we add the data layer on the map,\n                 * it will use the default.\n                 */\n                map.data.add(new google.maps.Data.Feature({\n                    geometry: new google.maps.Data.Polygon([\n                        event.overlay.getPath().getArray()\n                    ])\n                }));\n                break;\n            case \"rectangle\":\n                let bounds = event.overlay.getBounds();\n                let points = [\n                    bounds.getSouthWest(),\n                    {\n                        lat: bounds.getSouthWest().lat(),\n                        lng: bounds.getNorthEast().lng()\n                    },\n                    bounds.getNorthEast(),\n                    {\n                        lng: bounds.getSouthWest().lng(),\n                        lat: bounds.getNorthEast().lat()\n                    }\n                ];\n                drawingLayer.add(new google.maps.Data.Feature({\n                    geometry: new google.maps.Data.Polygon([points])\n                }));\n                map.data.add(new google.maps.Data.Feature({\n                    geometry: new google.maps.Data.Polygon([points])\n                }));\n                break;\n            case \"polyline\":\n                drawingLayer.add(new google.maps.Data.Feature({\n                    geometry: new google.maps.Data.LineString(event.overlay.getPath().getArray())\n                }));\n                map.data.add(new google.maps.Data.Feature({\n                    geometry: new google.maps.Data.LineString(event.overlay.getPath().getArray())\n                }));\n                break;\n            case \"circle\":\n                drawingLayer.add(new google.maps.Data.Feature({\n                    properties: {\n                        radius: event.overlay.getRadius()\n                    },\n                    geometry: new google.maps.Data.Point(event.overlay.getCenter())\n                }));\n                map.data.add(new google.maps.Data.Feature({\n                    properties: {\n                        radius: event.overlay.getRadius()\n                    }\n                }));\n                break;\n            case \"marker\":\n                drawingLayer.add(new google.maps.Data.Feature({\n                    geometry: new google.maps.Data.Point(event.overlay.getPosition())\n                }));\n                break;\n            default:\n                console.log(\"end\");\n        }\n    });\n}\n\n},{\"./styledMap\":4}],3:[function(require,module,exports){\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction loadMapScript(libraries, c) {\n    console.log(\"hey there\");\n    if (!document.getElementById(\"gmap\")) {\n        const script = document.createElement(\"script\");\n        script.type = \"text/javascript\";\n        script.src =\n            \"https://maps.googleapis.com/maps/api/js?key=AIzaSyCrJXi-qaWm9FtOLL0h3xO_kfORit6WS2s\";\n        if (libraries && libraries.length > 0) {\n            script.src = script.src + libraries;\n        }\n        script.id = \"gmap\";\n        script.addEventListener(\"load\", e => {\n            c(null, e);\n        }, false);\n        document.head.appendChild(script);\n    }\n}\nexports.loadMapScript = loadMapScript;\n\n},{}],4:[function(require,module,exports){\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.styledMap = [\n    { elementType: \"geometry\", stylers: [{ color: \"#9a9a9a\" }] },\n    { elementType: \"labels.text.fill\", stylers: [{ color: \"#111111\" }] },\n    { elementType: \"labels.text.stroke\", stylers: [{ visibility: \"off\" }] },\n    {\n        featureType: \"administrative\",\n        elementType: \"geometry.stroke\",\n        stylers: [{ color: \"#c8c8c8\" }]\n    },\n    {\n        featureType: \"administrative.land_parcel\",\n        elementType: \"geometry.stroke\",\n        stylers: [{ color: \"#c8c8c8\" }]\n    },\n    {\n        featureType: \"administrative.land_parcel\",\n        elementType: \"labels.text.fill\",\n        stylers: [{ color: \"#c8c8c8\" }]\n    },\n    {\n        featureType: \"landscape.natural\",\n        elementType: \"geometry\",\n        stylers: [{ color: \"#c8c8c8\" }]\n    },\n    {\n        featureType: \"poi\",\n        elementType: \"geometry\",\n        stylers: [{ color: \"#c8c8c8\" }]\n    },\n    {\n        featureType: \"poi\",\n        elementType: \"labels.text.fill\",\n        stylers: [{ color: \"#111111\" }, { visibility: \"simplified\" }]\n    },\n    {\n        featureType: \"poi.park\",\n        elementType: \"geometry.fill\",\n        stylers: [{ color: \"#c8c8c8\" }]\n    },\n    {\n        featureType: \"poi.park\",\n        elementType: \"labels.text.fill\",\n        stylers: [{ color: \"#111111\" }]\n    },\n    {\n        featureType: \"poi.business\",\n        stylers: [{ visibility: \"off\" }]\n    },\n    {\n        featureType: \"road\",\n        elementType: \"geometry\",\n        stylers: [{ color: \"#aaaaaa\" }]\n        // stylers: [{color: '#ff0000'}]\n    },\n    {\n        featureType: \"road.arterial\",\n        elementType: \"geometry\",\n        stylers: [{ color: \"#999999\" }]\n        // stylers: [{color: '#ff0000'}]\n    },\n    {\n        featureType: \"road.highway\",\n        elementType: \"geometry\",\n        stylers: [{ color: \"#666666\" }]\n        // stylers: [{color: '#ff0000'}]\n    },\n    {\n        featureType: \"road.highway\",\n        elementType: \"geometry.stroke\",\n        stylers: [{ visibility: \"off\" }]\n    },\n    {\n        featureType: \"road.highway.controlled_access\",\n        elementType: \"geometry\",\n        stylers: [{ color: \"#444444\" }]\n    },\n    {\n        featureType: \"road.highway.controlled_access\",\n        elementType: \"geometry.stroke\",\n        stylers: [{ visibility: \"off\" }]\n    },\n    {\n        featureType: \"road.local\",\n        elementType: \"labels.text.fill\",\n        stylers: [{ color: \"#111111\" }]\n    },\n    {\n        featureType: \"transit.line\",\n        elementType: \"geometry\",\n        stylers: [{ color: \"#c8c8c8\" }]\n    },\n    {\n        featureType: \"transit.line\",\n        elementType: \"labels.text.fill\",\n        stylers: [{ color: \"#111111\" }]\n    },\n    {\n        featureType: \"transit.line\",\n        elementType: \"labels.text.stroke\",\n        stylers: [{ visibility: \"off\" }]\n    },\n    {\n        featureType: \"transit.station\",\n        elementType: \"geometry\",\n        stylers: [{ color: \"#c8c8c8\" }]\n    },\n    {\n        featureType: \"water\",\n        elementType: \"geometry.fill\",\n        stylers: [{ color: \"#222222\" }]\n    },\n    {\n        featureType: \"water\",\n        elementType: \"labels.text.fill\",\n        stylers: [{ color: \"#222222\" }]\n    }\n];\n\n},{}],5:[function(require,module,exports){\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction RegisterSW() {\n    if (\"serviceWorker\" in navigator) {\n        navigator.serviceWorker.register(\"/service-worker.js\", {\n            scope: \"/\"\n        });\n    }\n}\nexports.RegisterSW = RegisterSW;\n\n},{}]},{},[1])\n\n","export function loadMapScript(libraries: string, c: Function): void {\n  console.log(\"hey there\");\n  if (!document.getElementById(\"gmap\")) {\n    const script = document.createElement(\"script\");\n    script.type = \"text/javascript\";\n    script.src =\n      \"https://maps.googleapis.com/maps/api/js?key=AIzaSyCrJXi-qaWm9FtOLL0h3xO_kfORit6WS2s\";\n    if (libraries && libraries.length > 0) {\n      script.src = script.src + libraries;\n    }\n    script.id = \"gmap\";\n    script.addEventListener(\n      \"load\",\n      e => {\n        c(null, e);\n      },\n      false\n    );\n    document.head.appendChild(script);\n  }\n}\n","export const styledMap = [\n  { elementType: \"geometry\", stylers: [{ color: \"#9a9a9a\" }] },\n  { elementType: \"labels.text.fill\", stylers: [{ color: \"#111111\" }] },\n  { elementType: \"labels.text.stroke\", stylers: [{ visibility: \"off\" }] },\n  {\n    featureType: \"administrative\",\n    elementType: \"geometry.stroke\",\n    stylers: [{ color: \"#c8c8c8\" }]\n  },\n  {\n    featureType: \"administrative.land_parcel\",\n    elementType: \"geometry.stroke\",\n    stylers: [{ color: \"#c8c8c8\" }]\n  },\n  {\n    featureType: \"administrative.land_parcel\",\n    elementType: \"labels.text.fill\",\n    stylers: [{ color: \"#c8c8c8\" }]\n  },\n  {\n    featureType: \"landscape.natural\",\n    elementType: \"geometry\",\n    stylers: [{ color: \"#c8c8c8\" }]\n  },\n  {\n    featureType: \"poi\",\n    elementType: \"geometry\",\n    stylers: [{ color: \"#c8c8c8\" }]\n  },\n  {\n    featureType: \"poi\",\n    elementType: \"labels.text.fill\",\n    stylers: [{ color: \"#111111\" }, { visibility: \"simplified\" }]\n  },\n  {\n    featureType: \"poi.park\",\n    elementType: \"geometry.fill\",\n    stylers: [{ color: \"#c8c8c8\" }]\n  },\n  {\n    featureType: \"poi.park\",\n    elementType: \"labels.text.fill\",\n    stylers: [{ color: \"#111111\" }]\n  },\n  {\n    featureType: \"poi.business\",\n    stylers: [{ visibility: \"off\" }]\n  },\n  {\n    featureType: \"road\",\n    elementType: \"geometry\",\n    stylers: [{ color: \"#aaaaaa\" }]\n    // stylers: [{color: '#ff0000'}]\n  },\n  {\n    featureType: \"road.arterial\",\n    elementType: \"geometry\",\n    stylers: [{ color: \"#999999\" }]\n    // stylers: [{color: '#ff0000'}]\n  },\n  {\n    featureType: \"road.highway\",\n    elementType: \"geometry\",\n    stylers: [{ color: \"#666666\" }]\n    // stylers: [{color: '#ff0000'}]\n  },\n  {\n    featureType: \"road.highway\",\n    elementType: \"geometry.stroke\",\n    stylers: [{ visibility: \"off\" }]\n  },\n  {\n    featureType: \"road.highway.controlled_access\",\n    elementType: \"geometry\",\n    stylers: [{ color: \"#444444\" }]\n  },\n  {\n    featureType: \"road.highway.controlled_access\",\n    elementType: \"geometry.stroke\",\n    stylers: [{ visibility: \"off\" }]\n  },\n  {\n    featureType: \"road.local\",\n    elementType: \"labels.text.fill\",\n    stylers: [{ color: \"#111111\" }]\n  },\n  {\n    featureType: \"transit.line\",\n    elementType: \"geometry\",\n    stylers: [{ color: \"#c8c8c8\" }]\n  },\n  {\n    featureType: \"transit.line\",\n    elementType: \"labels.text.fill\",\n    stylers: [{ color: \"#111111\" }]\n  },\n  {\n    featureType: \"transit.line\",\n    elementType: \"labels.text.stroke\",\n    stylers: [{ visibility: \"off\" }]\n  },\n  {\n    featureType: \"transit.station\",\n    elementType: \"geometry\",\n    stylers: [{ color: \"#c8c8c8\" }]\n  },\n  {\n    featureType: \"water\",\n    elementType: \"geometry.fill\",\n    stylers: [{ color: \"#222222\" }]\n  },\n  {\n    featureType: \"water\",\n    elementType: \"labels.text.fill\",\n    stylers: [{ color: \"#222222\" }]\n  }\n];\n","export function RegisterSW() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.register(\"/service-worker.js\", {\n      scope: \"/\"\n    });\n  }\n}\n"]}