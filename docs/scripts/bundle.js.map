{"version":3,"sources":["node_modules/browser-pack/_prelude.js","app/scripts/clickListeners.ts","app/scripts/drawing.ts","app/scripts/gradient.ts","app/scripts/main.ts","bundle.js","app/scripts/map.ts","app/scripts/mapNumber.ts","app/scripts/mapscript.ts","app/scripts/styledMap.ts"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","1","module","Object","defineProperty","value","map","drawingFunctions","loadAllDrawingButtons","drawing_buttons","forEach","btn","parent","type","img_btn","document","createElement","id","concat","name","tabIndex","setAttribute","src","img","addEventListener","ev","clearAll","draw","appendChild","createImgButton","drawing","listenersForControlButtons","getElementById","event","city","changeType","./map","2","drawingManager","drawingLayer","allOverlays","listenForDrawing","google","maps","DrawingManager","drawingMode","drawingControl","setMap","Data","addListener","push","overlay","add","Feature","geometry","Polygon","getPath","getArray","data","bounds","getBounds","points","getSouthWest","lat","lng","getNorthEast","LineString","properties","radius","getRadius","Point","getCenter","getPosition","console","log","setDrawingMode","OverlayType","MARKER","point","url","scaledSize","Size","setOptions","markerOptions","icon","clickable","draggable","cat","POLYGON","polygonOptions","fillColor","fillOpacity","strokeWeight","strokeColor","editable","RECTANGLE","rectangleOptions","POLYLINE","polylineOptions","CIRCLE","circleOptions","toGeoJson","obj","content","fileName","file","Blob","href","URL","createObjectURL","download","click","JSON","stringify","customGradient","mapscript_1","clickListeners","map_1","initMap","Map","zoom","scrollwheel","panControl","mapTypeControl","zoomControl","streetViewControl","scaleControl","zoomControlOptions","style","ZoomControlStyle","LARGE","position","ControlPosition","RIGHT_BOTTOM","FunWithMaps","window","loadMapScript","./clickListeners","./mapscript","5","this_map","london","infoWindow","heatmap","lettings","styledMap","drawing_1","gradient_1","mapNumber_1","dark_theme","markers","mastsVisible","coords","x","y","LatLng","darkmap","StyledMapType","setCenter","mapTypes","set","setMapTypeId","controls","LEFT_TOP","LEFT_BOTTOM","TOP_RIGHT","antenna","fetch","then","response","json","response_masts","marker","Marker","parseFloat","InfoWindow","setPosition","latLng","setContent","open","error","loadAllMarkers","heatmapData","location","weight","parseInt","visualization","HeatmapLayer","loadGeoJson","feature","getProperty","setStyle","lon","Math","round","mapNumber","toggleMasts","./mapNumber","./styledMap","6","in_min","in_max","out_min","out_max","7","libraries","script","body","8","elementType","stylers","color","visibility","featureType"],"mappings":"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","file":"bundle.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","import * as map from \"./map\";\nimport * as drawingFunctions from \"./drawing\";\n\nexport function loadAllDrawingButtons() {\n  drawing_buttons.forEach((btn: { name: string; img: string }) => {\n    createImgButton(btn, drawing, btn.name === \"clear\" ? \"clear\" : \"draw\");\n  });\n}\n\nexport function listenersForControlButtons() {\n  document\n    .getElementById(\"city-lon\")\n    .addEventListener(\"click\", (event: MouseEvent) => {\n      map.city(\"lon\");\n    });\n  document\n    .getElementById(\"city-man\")\n    .addEventListener(\"click\", (event: MouseEvent) => {\n      map.city(\"man\");\n    });\n  document\n    .getElementById(\"lights\")\n    .addEventListener(\"click\", (event: MouseEvent) => {\n      map.changeType();\n    });\n}\n\nconst drawing = document.getElementById(\"drawingControls\");\nconst drawing_buttons = [\n  {\n    name: \"marker\",\n    img: \"point\"\n  },\n  {\n    name: \"polygon\",\n    img: \"polygon\"\n  },\n  {\n    name: \"square\",\n    img: \"square\"\n  },\n  {\n    name: \"circle\",\n    img: \"circle\"\n  },\n  {\n    name: \"polyline\",\n    img: \"line\"\n  },\n  {\n    name: \"cat\",\n    img: \"cat\"\n  },\n  {\n    name: \"pan\",\n    img: \"pan\"\n  },\n  {\n    name: \"save\",\n    img: \"save\"\n  },\n  {\n    name: \"clear\",\n    img: \"clear\"\n  }\n];\n\nfunction createImgButton(\n  btn: { name: string; img: string },\n  parent: HTMLElement,\n  type: string\n) {\n  const img_btn = document.createElement(\"img\");\n  img_btn.id = `${btn.name}-control`;\n  img_btn.tabIndex = 0;\n  img_btn.setAttribute(\"role\", \"button\");\n  if (type === \"clear\") {\n    img_btn.src = `assets/img/${btn.img}.svg`;\n    img_btn.addEventListener(\"click\", (ev: MouseEvent) => {\n      drawingFunctions.clearAll();\n    });\n  } else {\n    img_btn.src = `assets/img/${btn.img}.png`;\n    img_btn.addEventListener(\"click\", (ev: MouseEvent) => {\n      drawingFunctions.draw(btn.name);\n    });\n  }\n  parent.appendChild(img_btn);\n}\n","import {} from \"google-maps\";\n\nlet drawingManager: google.maps.drawing.DrawingManager;\nlet drawingLayer: google.maps.Data;\nlet allOverlays: any[] = [];\n\nexport function listenForDrawing(map: google.maps.Map) {\n  drawingManager = new google.maps.drawing.DrawingManager({\n    drawingMode: null,\n    drawingControl: false // i have my custom tools so i don't need the defaults to be displayed\n  });\n  drawingManager.setMap(map);\n  drawingLayer = new google.maps.Data();\n  drawingManager.addListener(\"overlaycomplete\", event => {\n    allOverlays.push(event.overlay);\n    event.overlay.addListener(\"rightclick\", () => {\n      event.overlay.setMap(null);\n    });\n    switch (event.type) {\n      case \"polygon\":\n        drawingLayer.add(\n          new google.maps.Data.Feature({\n            geometry: new google.maps.Data.Polygon([\n              event.overlay.getPath().getArray()\n            ])\n          })\n        );\n        /**\n         * We could do this, here:\n         *\n         * drawingLayer.setMap(map);\n         *\n         * The reason we are not doing this,\n         * is because we want to keep the custom icons\n         * showing. And if we add the data layer on the map,\n         * it will use the default.\n         */\n        map.data.add(\n          new google.maps.Data.Feature({\n            geometry: new google.maps.Data.Polygon([\n              event.overlay.getPath().getArray()\n            ])\n          })\n        );\n        break;\n      case \"rectangle\":\n        let bounds = event.overlay.getBounds();\n        let points = [\n          bounds.getSouthWest(),\n          {\n            lat: bounds.getSouthWest().lat(),\n            lng: bounds.getNorthEast().lng()\n          },\n          bounds.getNorthEast(),\n          {\n            lng: bounds.getSouthWest().lng(),\n            lat: bounds.getNorthEast().lat()\n          }\n        ];\n        drawingLayer.add(\n          new google.maps.Data.Feature({\n            geometry: new google.maps.Data.Polygon([points])\n          })\n        );\n        map.data.add(\n          new google.maps.Data.Feature({\n            geometry: new google.maps.Data.Polygon([points])\n          })\n        );\n        break;\n      case \"polyline\":\n        drawingLayer.add(\n          new google.maps.Data.Feature({\n            geometry: new google.maps.Data.LineString(\n              event.overlay.getPath().getArray()\n            )\n          })\n        );\n        map.data.add(\n          new google.maps.Data.Feature({\n            geometry: new google.maps.Data.LineString(\n              event.overlay.getPath().getArray()\n            )\n          })\n        );\n        break;\n      case \"circle\":\n        drawingLayer.add(\n          new google.maps.Data.Feature({\n            properties: {\n              radius: event.overlay.getRadius()\n            },\n            geometry: new google.maps.Data.Point(event.overlay.getCenter())\n          })\n        );\n        map.data.add(\n          new google.maps.Data.Feature({\n            properties: {\n              radius: event.overlay.getRadius()\n            }\n          })\n        );\n        break;\n      case \"marker\":\n        drawingLayer.add(\n          new google.maps.Data.Feature({\n            geometry: new google.maps.Data.Point(event.overlay.getPosition())\n          })\n        );\n        break;\n      default:\n        console.log(\"end\");\n    }\n  });\n}\n\nexport function draw(type: string) {\n  console.log(\"hey\");\n  switch (type) {\n    case \"marker\":\n      drawingManager.setDrawingMode(google.maps.drawing.OverlayType.MARKER);\n      let point: google.maps.Icon = {\n        url: \"assets/img/point.png\",\n        scaledSize: new google.maps.Size(30, 30)\n      };\n\n      drawingManager.setOptions({\n        markerOptions: {\n          icon: point,\n          clickable: true,\n          draggable: true\n        }\n      });\n      break;\n    case \"cat\":\n      drawingManager.setDrawingMode(google.maps.drawing.OverlayType.MARKER);\n      let cat: google.maps.Icon = {\n        url: \"assets/img/cat.png\",\n        scaledSize: new google.maps.Size(70, 70)\n      };\n      drawingManager.setOptions({\n        markerOptions: {\n          icon: cat,\n          clickable: true,\n          draggable: true\n        }\n      });\n      break;\n    case \"polygon\":\n      drawingManager.setDrawingMode(google.maps.drawing.OverlayType.POLYGON);\n      drawingManager.setOptions({\n        polygonOptions: {\n          fillColor: \"#9c4d4f\",\n          fillOpacity: 0.5,\n          strokeWeight: 2,\n          strokeColor: \"#401619\",\n          clickable: true,\n          editable: true,\n          draggable: true\n        }\n      });\n      break;\n    case \"square\":\n      drawingManager.setDrawingMode(google.maps.drawing.OverlayType.RECTANGLE);\n      drawingManager.setOptions({\n        rectangleOptions: {\n          fillColor: \"#fff82e\",\n          fillOpacity: 0.5,\n          strokeWeight: 2,\n          strokeColor: \"#c8a535\",\n          clickable: true,\n          editable: true,\n          draggable: true\n        }\n      });\n      break;\n    case \"polyline\":\n      drawingManager.setDrawingMode(google.maps.drawing.OverlayType.POLYLINE);\n      drawingManager.setOptions({\n        polylineOptions: {\n          strokeWeight: 2,\n          strokeColor: \"#00b801\",\n          clickable: true,\n          editable: true,\n          draggable: true\n        }\n      });\n      break;\n    case \"circle\":\n      drawingManager.setDrawingMode(google.maps.drawing.OverlayType.CIRCLE);\n      drawingManager.setOptions({\n        circleOptions: {\n          fillColor: \"#00b801\",\n          fillOpacity: 0.5,\n          strokeWeight: 2,\n          strokeColor: \"#00b801\",\n          clickable: true,\n          editable: true,\n          draggable: true\n        }\n      });\n      break;\n    case \"pan\":\n      drawingManager.setDrawingMode(null);\n      break;\n    case \"save\":\n      drawingManager.setDrawingMode(null);\n      drawingLayer.toGeoJson(obj => {\n        console.log(obj);\n        download(JSON.stringify(obj), \"drawingData.txt\");\n      });\n      break;\n    default:\n      drawingManager.setDrawingMode(null);\n  }\n}\n\nfunction download(content: string, fileName: string) {\n  let a = document.createElement(\"a\");\n  let file = new Blob([content], { type: \"text/plain\" });\n  a.href = URL.createObjectURL(file);\n  a.download = fileName;\n  a.click();\n}\n\nexport function clearAll() {\n  allOverlays.map(overlay => {\n    overlay.setMap(null);\n  });\n  drawingLayer.setMap(null);\n  drawingLayer = new google.maps.Data();\n  allOverlays = [];\n}\n","export const customGradient = [\n    'rgba(0, 255, 255, 0)',\n    'rgba(0, 255, 255, 1)',\n    'rgba(0, 191, 255, 1)',\n    'rgba(0, 127, 255, 1)',\n    'rgba(0, 63, 255, 1)',\n    'rgba(0, 0, 255, 1)',\n    'rgba(0, 0, 223, 1)',\n    'rgba(0, 0, 191, 1)',\n    'rgba(0, 0, 159, 1)',\n    'rgba(0, 0, 127, 1)',\n    'rgba(63, 0, 91, 1)',\n    'rgba(127, 0, 63, 1)',\n    'rgba(191, 0, 31, 1)',\n    'rgba(255, 0, 0, 1)'\n  ];","/// <reference types=\"@types/markerclustererplus\" />\n\nimport { loadMapScript } from \"./mapscript\";\n// import { RegisterSW } from \"./sw-reg\";\nimport * as clickListeners from \"./clickListeners\";\nimport { FunWithMaps } from \"./map\";\nimport {} from \"google-maps\";\n\n// RegisterSW();\nclickListeners.loadAllDrawingButtons();\nclickListeners.listenersForControlButtons();\n\nlet map: google.maps.Map;\n\nif (window[\"google\"] && window[\"google\"][\"maps\"]) {\n  initMap();\n} else {\n  loadMapScript(\"geometry,drawing,visualization\", (event: Event) => {\n    console.log(event);\n    initMap();\n  });\n}\n\nfunction initMap() {\n  map = new google.maps.Map(document.getElementById(\"map\"), {\n    zoom: 11,\n    scrollwheel: true,\n    panControl: false,\n    mapTypeControl: false,\n    zoomControl: true,\n    streetViewControl: false,\n    scaleControl: true,\n    zoomControlOptions: {\n      style: google.maps.ZoomControlStyle.LARGE,\n      position: google.maps.ControlPosition.RIGHT_BOTTOM\n    }\n  });\n  FunWithMaps(map);\n}\n","(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst map = require(\"./map\");\nconst drawingFunctions = require(\"./drawing\");\nfunction loadAllDrawingButtons() {\n    drawing_buttons.forEach((btn) => {\n        createImgButton(btn, drawing, btn.name === \"clear\" ? \"clear\" : \"draw\");\n    });\n}\nexports.loadAllDrawingButtons = loadAllDrawingButtons;\nfunction listenersForControlButtons() {\n    document\n        .getElementById(\"city-lon\")\n        .addEventListener(\"click\", (event) => {\n        map.city(\"lon\");\n    });\n    document\n        .getElementById(\"city-man\")\n        .addEventListener(\"click\", (event) => {\n        map.city(\"man\");\n    });\n    document\n        .getElementById(\"lights\")\n        .addEventListener(\"click\", (event) => {\n        map.changeType();\n    });\n}\nexports.listenersForControlButtons = listenersForControlButtons;\nconst drawing = document.getElementById(\"drawingControls\");\nconst drawing_buttons = [\n    {\n        name: \"marker\",\n        img: \"point\"\n    },\n    {\n        name: \"polygon\",\n        img: \"polygon\"\n    },\n    {\n        name: \"square\",\n        img: \"square\"\n    },\n    {\n        name: \"circle\",\n        img: \"circle\"\n    },\n    {\n        name: \"polyline\",\n        img: \"line\"\n    },\n    {\n        name: \"cat\",\n        img: \"cat\"\n    },\n    {\n        name: \"pan\",\n        img: \"pan\"\n    },\n    {\n        name: \"save\",\n        img: \"save\"\n    },\n    {\n        name: \"clear\",\n        img: \"clear\"\n    }\n];\nfunction createImgButton(btn, parent, type) {\n    const img_btn = document.createElement(\"img\");\n    img_btn.id = `${btn.name}-control`;\n    img_btn.tabIndex = 0;\n    img_btn.setAttribute(\"role\", \"button\");\n    if (type === \"clear\") {\n        img_btn.src = `assets/img/${btn.img}.svg`;\n        img_btn.addEventListener(\"click\", (ev) => {\n            drawingFunctions.clearAll();\n        });\n    }\n    else {\n        img_btn.src = `assets/img/${btn.img}.png`;\n        img_btn.addEventListener(\"click\", (ev) => {\n            drawingFunctions.draw(btn.name);\n        });\n    }\n    parent.appendChild(img_btn);\n}\n\n},{\"./drawing\":2,\"./map\":5}],2:[function(require,module,exports){\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nlet drawingManager;\nlet drawingLayer;\nlet allOverlays = [];\nfunction listenForDrawing(map) {\n    drawingManager = new google.maps.drawing.DrawingManager({\n        drawingMode: null,\n        drawingControl: false // i have my custom tools so i don't need the defaults to be displayed\n    });\n    drawingManager.setMap(map);\n    drawingLayer = new google.maps.Data();\n    drawingManager.addListener(\"overlaycomplete\", event => {\n        allOverlays.push(event.overlay);\n        event.overlay.addListener(\"rightclick\", () => {\n            event.overlay.setMap(null);\n        });\n        switch (event.type) {\n            case \"polygon\":\n                drawingLayer.add(new google.maps.Data.Feature({\n                    geometry: new google.maps.Data.Polygon([\n                        event.overlay.getPath().getArray()\n                    ])\n                }));\n                /**\n                 * We could do this, here:\n                 *\n                 * drawingLayer.setMap(map);\n                 *\n                 * The reason we are not doing this,\n                 * is because we want to keep the custom icons\n                 * showing. And if we add the data layer on the map,\n                 * it will use the default.\n                 */\n                map.data.add(new google.maps.Data.Feature({\n                    geometry: new google.maps.Data.Polygon([\n                        event.overlay.getPath().getArray()\n                    ])\n                }));\n                break;\n            case \"rectangle\":\n                let bounds = event.overlay.getBounds();\n                let points = [\n                    bounds.getSouthWest(),\n                    {\n                        lat: bounds.getSouthWest().lat(),\n                        lng: bounds.getNorthEast().lng()\n                    },\n                    bounds.getNorthEast(),\n                    {\n                        lng: bounds.getSouthWest().lng(),\n                        lat: bounds.getNorthEast().lat()\n                    }\n                ];\n                drawingLayer.add(new google.maps.Data.Feature({\n                    geometry: new google.maps.Data.Polygon([points])\n                }));\n                map.data.add(new google.maps.Data.Feature({\n                    geometry: new google.maps.Data.Polygon([points])\n                }));\n                break;\n            case \"polyline\":\n                drawingLayer.add(new google.maps.Data.Feature({\n                    geometry: new google.maps.Data.LineString(event.overlay.getPath().getArray())\n                }));\n                map.data.add(new google.maps.Data.Feature({\n                    geometry: new google.maps.Data.LineString(event.overlay.getPath().getArray())\n                }));\n                break;\n            case \"circle\":\n                drawingLayer.add(new google.maps.Data.Feature({\n                    properties: {\n                        radius: event.overlay.getRadius()\n                    },\n                    geometry: new google.maps.Data.Point(event.overlay.getCenter())\n                }));\n                map.data.add(new google.maps.Data.Feature({\n                    properties: {\n                        radius: event.overlay.getRadius()\n                    }\n                }));\n                break;\n            case \"marker\":\n                drawingLayer.add(new google.maps.Data.Feature({\n                    geometry: new google.maps.Data.Point(event.overlay.getPosition())\n                }));\n                break;\n            default:\n                console.log(\"end\");\n        }\n    });\n}\nexports.listenForDrawing = listenForDrawing;\nfunction draw(type) {\n    console.log(\"hey\");\n    switch (type) {\n        case \"marker\":\n            drawingManager.setDrawingMode(google.maps.drawing.OverlayType.MARKER);\n            let point = {\n                url: \"assets/img/point.png\",\n                scaledSize: new google.maps.Size(30, 30)\n            };\n            drawingManager.setOptions({\n                markerOptions: {\n                    icon: point,\n                    clickable: true,\n                    draggable: true\n                }\n            });\n            break;\n        case \"cat\":\n            drawingManager.setDrawingMode(google.maps.drawing.OverlayType.MARKER);\n            let cat = {\n                url: \"assets/img/cat.png\",\n                scaledSize: new google.maps.Size(70, 70)\n            };\n            drawingManager.setOptions({\n                markerOptions: {\n                    icon: cat,\n                    clickable: true,\n                    draggable: true\n                }\n            });\n            break;\n        case \"polygon\":\n            drawingManager.setDrawingMode(google.maps.drawing.OverlayType.POLYGON);\n            drawingManager.setOptions({\n                polygonOptions: {\n                    fillColor: \"#9c4d4f\",\n                    fillOpacity: 0.5,\n                    strokeWeight: 2,\n                    strokeColor: \"#401619\",\n                    clickable: true,\n                    editable: true,\n                    draggable: true\n                }\n            });\n            break;\n        case \"square\":\n            drawingManager.setDrawingMode(google.maps.drawing.OverlayType.RECTANGLE);\n            drawingManager.setOptions({\n                rectangleOptions: {\n                    fillColor: \"#fff82e\",\n                    fillOpacity: 0.5,\n                    strokeWeight: 2,\n                    strokeColor: \"#c8a535\",\n                    clickable: true,\n                    editable: true,\n                    draggable: true\n                }\n            });\n            break;\n        case \"polyline\":\n            drawingManager.setDrawingMode(google.maps.drawing.OverlayType.POLYLINE);\n            drawingManager.setOptions({\n                polylineOptions: {\n                    strokeWeight: 2,\n                    strokeColor: \"#00b801\",\n                    clickable: true,\n                    editable: true,\n                    draggable: true\n                }\n            });\n            break;\n        case \"circle\":\n            drawingManager.setDrawingMode(google.maps.drawing.OverlayType.CIRCLE);\n            drawingManager.setOptions({\n                circleOptions: {\n                    fillColor: \"#00b801\",\n                    fillOpacity: 0.5,\n                    strokeWeight: 2,\n                    strokeColor: \"#00b801\",\n                    clickable: true,\n                    editable: true,\n                    draggable: true\n                }\n            });\n            break;\n        case \"pan\":\n            drawingManager.setDrawingMode(null);\n            break;\n        case \"save\":\n            drawingManager.setDrawingMode(null);\n            drawingLayer.toGeoJson(obj => {\n                console.log(obj);\n                download(JSON.stringify(obj), \"drawingData.txt\");\n            });\n            break;\n        default:\n            drawingManager.setDrawingMode(null);\n    }\n}\nexports.draw = draw;\nfunction download(content, fileName) {\n    let a = document.createElement(\"a\");\n    let file = new Blob([content], { type: \"text/plain\" });\n    a.href = URL.createObjectURL(file);\n    a.download = fileName;\n    a.click();\n}\nfunction clearAll() {\n    allOverlays.map(overlay => {\n        overlay.setMap(null);\n    });\n    drawingLayer.setMap(null);\n    drawingLayer = new google.maps.Data();\n    allOverlays = [];\n}\nexports.clearAll = clearAll;\n\n},{}],3:[function(require,module,exports){\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.customGradient = [\n    'rgba(0, 255, 255, 0)',\n    'rgba(0, 255, 255, 1)',\n    'rgba(0, 191, 255, 1)',\n    'rgba(0, 127, 255, 1)',\n    'rgba(0, 63, 255, 1)',\n    'rgba(0, 0, 255, 1)',\n    'rgba(0, 0, 223, 1)',\n    'rgba(0, 0, 191, 1)',\n    'rgba(0, 0, 159, 1)',\n    'rgba(0, 0, 127, 1)',\n    'rgba(63, 0, 91, 1)',\n    'rgba(127, 0, 63, 1)',\n    'rgba(191, 0, 31, 1)',\n    'rgba(255, 0, 0, 1)'\n];\n\n},{}],4:[function(require,module,exports){\n\"use strict\";\n/// <reference types=\"@types/markerclustererplus\" />\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst mapscript_1 = require(\"./mapscript\");\n// import { RegisterSW } from \"./sw-reg\";\nconst clickListeners = require(\"./clickListeners\");\nconst map_1 = require(\"./map\");\n// RegisterSW();\nclickListeners.loadAllDrawingButtons();\nclickListeners.listenersForControlButtons();\nlet map;\nif (window[\"google\"] && window[\"google\"][\"maps\"]) {\n    initMap();\n}\nelse {\n    mapscript_1.loadMapScript(\"geometry,drawing,visualization\", (event) => {\n        console.log(event);\n        initMap();\n    });\n}\nfunction initMap() {\n    map = new google.maps.Map(document.getElementById(\"map\"), {\n        zoom: 11,\n        scrollwheel: true,\n        panControl: false,\n        mapTypeControl: false,\n        zoomControl: true,\n        streetViewControl: false,\n        scaleControl: true,\n        zoomControlOptions: {\n            style: google.maps.ZoomControlStyle.LARGE,\n            position: google.maps.ControlPosition.RIGHT_BOTTOM\n        }\n    });\n    map_1.FunWithMaps(map);\n}\n\n},{\"./clickListeners\":1,\"./map\":5,\"./mapscript\":7}],5:[function(require,module,exports){\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst styledMap = require(\"./styledMap\");\nconst drawing_1 = require(\"./drawing\");\nconst gradient_1 = require(\"./gradient\");\nconst mapNumber_1 = require(\"./mapNumber\");\nlet this_map;\nlet london;\nlet dark_theme = true;\nlet markers = [];\nlet infoWindow;\nlet masts;\nlet mastsVisible = false;\nlet heatmap;\nlet lettings;\nlet showLonely = false;\nlet otherGeoJson;\nlet markerClusterer;\nlet clust_num;\nlet prevalence;\nlet clustersVisible = false;\nlet heatmapVisible = false;\nlet heatmap_radius = 20;\nlet viewReady = false;\nfunction FunWithMaps(map) {\n    this_map = map;\n    london = coords(51.561638, -0.14);\n    let darkmap = new google.maps.StyledMapType(styledMap.styledMap, {\n        name: \"Dark Map\"\n    });\n    map.setCenter(london);\n    map.mapTypes.set(\"dark_map\", darkmap);\n    map.setMapTypeId(\"dark_map\");\n    map.controls[google.maps.ControlPosition.LEFT_TOP].push(document.getElementById(\"controls\"));\n    map.controls[google.maps.ControlPosition.LEFT_BOTTOM].push(document.getElementById(\"legend\"));\n    map.controls[google.maps.ControlPosition.TOP_RIGHT].push(document.getElementById(\"drawingControls\"));\n    map.controls[google.maps.ControlPosition.RIGHT_BOTTOM].push(document.getElementById(\"katlink\"));\n    drawing_1.listenForDrawing(map);\n    loadAllMarkers(map);\n    loadHeatmapData();\n    loadGeoJson(map);\n}\nexports.FunWithMaps = FunWithMaps;\nfunction coords(x, y) {\n    return new google.maps.LatLng(x, y);\n}\nfunction loadAllMarkers(map) {\n    let antenna = {\n        url: \"assets/img/antennabl.png\",\n        scaledSize: new google.maps.Size(40, 40)\n    };\n    fetch(\"assets/data/masts.json\")\n        .then(response => {\n        return response.json();\n    })\n        .then((response_masts) => {\n        masts = response_masts.data;\n        masts.map((x) => {\n            let marker = new google.maps.Marker({\n                position: new google.maps.LatLng(parseFloat(x[18]), parseFloat(x[17])),\n                icon: antenna\n            });\n            infoWindow = new google.maps.InfoWindow();\n            marker.addListener(\"click\", e => {\n                infoWindow.setPosition(e.latLng);\n                infoWindow.setContent(`<p>${x[14]}</p>`);\n                infoWindow.open(map, marker);\n            });\n            markers.push(marker);\n        });\n    })\n        .catch(error => {\n        console.log(error, \"Error loading asset\");\n    });\n}\nfunction city(city) {\n    if (city === \"lon\") {\n        this_map.setCenter(coords(51.561638, -0.14));\n    }\n    if (city === \"man\") {\n        this_map.setCenter(coords(53.52476717517185, -2.5434842249308414));\n    }\n}\nexports.city = city;\nfunction changeType() {\n    if (!dark_theme) {\n        this_map.setMapTypeId(\"dark_map\");\n    }\n    else {\n        this_map.setMapTypeId(\"roadmap\");\n    }\n    dark_theme = !dark_theme;\n}\nexports.changeType = changeType;\nfunction toggleMasts() {\n    if (!mastsVisible) {\n        markers.map(marker => {\n            marker.setMap(this_map);\n        });\n    }\n    else {\n        markers.map(marker => {\n            marker.setMap(null);\n        });\n    }\n    mastsVisible = !mastsVisible;\n}\nexports.toggleMasts = toggleMasts;\nfunction loadHeatmapData() {\n    fetch(\"assets/data/letting.json\")\n        .then(response => {\n        return response.json();\n    })\n        .then((data) => {\n        lettings = data.data;\n        let heatmapData = [];\n        lettings.map((x) => {\n            if (x[24] && x[23]) {\n                heatmapData.push({\n                    location: new google.maps.LatLng(parseFloat(x[24]), parseFloat(x[23])),\n                    weight: parseInt(x[15], 10)\n                });\n            }\n        });\n        heatmap = new google.maps.visualization.HeatmapLayer({\n            data: heatmapData\n        });\n        heatmap.set(\"gradient\", gradient_1.customGradient);\n        heatmap.set(\"radius\", 40);\n        heatmap.set(\"opacity\", 1);\n    })\n        .catch(error => {\n        console.log(error);\n    });\n}\nfunction loadGeoJson(map) {\n    map.data.loadGeoJson(\"assets/data/lonely.geojson\");\n    map.data.addListener(\"mouseover\", e => {\n        showLonely = true;\n        prevalence = e.feature.getProperty(\"PREVALENCE\");\n    });\n    map.data.addListener(\"mouseout\", e => {\n        showLonely = false;\n    });\n    map.data.setStyle(feature => {\n        let lon = feature.getProperty(\"PREVALENCE\");\n        let value = 255 - Math.round(mapNumber_1.mapNumber(lon, 0, 5, 0, 255));\n        let color = \"rgb(\" + value + \",\" + value + \",\" + 0 + \")\";\n        return {\n            fillColor: color,\n            strokeWeight: 1\n        };\n    });\n    infoWindow = new google.maps.InfoWindow();\n    map.data.addListener(\"click\", e => {\n        infoWindow.setPosition(e.latLng);\n        infoWindow.setContent(`<div class=\"overlay\">\n    <p><b>Prevalence factor of Loneliness of those over the age of 65: </b>\n      ${e.feature.getProperty(\"PREVALENCE\")}</p></div>`);\n        infoWindow.open(map);\n    });\n}\n// toggleClusters(): void {\n//   if (!clustersVisible) {\n//     markerClusterer = new MarkerClusterer(map, markers, {\n//       imagePath: \"assets/img/m\"\n//     });\n//     markerClusterer.setGridSize(10);\n//   } else {\n//     markerClusterer.clearMarkers();\n//   }\n//   clustersVisible = !clustersVisible;\n// }\n// toggleHeatmap(): void {\n//   if (heatmapVisible) {\n//     heatmap.setMap(null);\n//   } else {\n//     heatmap.setMap(map);\n//   }\n//   heatmapVisible = !heatmapVisible;\n// }\n// changeCluster(): void {\n//   clustersVisible = true;\n//   if (markerClusterer) {\n//     markerClusterer.clearMarkers();\n//   }\n//   markerClusterer = new MarkerClusterer(map, markers, {\n//     imagePath: \"assets/img/m\"\n//   });\n//   markerClusterer.setGridSize(clust_num);\n// }\n// changed() {\n//   heatmap.set(\"radius\", heatmap_radius);\n// }\n\n},{\"./drawing\":2,\"./gradient\":3,\"./mapNumber\":6,\"./styledMap\":8}],6:[function(require,module,exports){\n\"use strict\";\n/**\n * It maps a number to a range\n *\n * x is the number we want to map\n *\n * in_min - in_max is the range the numer is in\n *\n * out_min - out_max is the range we want to map the number to\n *\n * */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction mapNumber(x, in_min, in_max, out_min, out_max) {\n    return ((x - in_min) * (out_max - out_min)) / (in_max - in_min) + out_min;\n}\nexports.mapNumber = mapNumber;\n\n},{}],7:[function(require,module,exports){\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction loadMapScript(libraries, c) {\n    console.log(\"hey there\");\n    if (!document.getElementById(\"gmap\")) {\n        const script = document.createElement(\"script\");\n        script.type = \"text/javascript\";\n        script.src =\n            \"https://maps.googleapis.com/maps/api/js?key=AIzaSyCrJXi-qaWm9FtOLL0h3xO_kfORit6WS2s\";\n        if (libraries && libraries.length > 0) {\n            script.src = script.src + \"&libraries=\" + libraries;\n        }\n        script.id = \"gmap\";\n        script.addEventListener(\"load\", e => {\n            console.log(\"loaded\");\n            c(e);\n        }, false);\n        document.body.appendChild(script);\n    }\n}\nexports.loadMapScript = loadMapScript;\n\n},{}],8:[function(require,module,exports){\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.styledMap = [\n    { elementType: \"geometry\", stylers: [{ color: \"#9a9a9a\" }] },\n    { elementType: \"labels.text.fill\", stylers: [{ color: \"#111111\" }] },\n    { elementType: \"labels.text.stroke\", stylers: [{ visibility: \"off\" }] },\n    {\n        featureType: \"administrative\",\n        elementType: \"geometry.stroke\",\n        stylers: [{ color: \"#c8c8c8\" }]\n    },\n    {\n        featureType: \"administrative.land_parcel\",\n        elementType: \"geometry.stroke\",\n        stylers: [{ color: \"#c8c8c8\" }]\n    },\n    {\n        featureType: \"administrative.land_parcel\",\n        elementType: \"labels.text.fill\",\n        stylers: [{ color: \"#c8c8c8\" }]\n    },\n    {\n        featureType: \"landscape.natural\",\n        elementType: \"geometry\",\n        stylers: [{ color: \"#c8c8c8\" }]\n    },\n    {\n        featureType: \"poi\",\n        elementType: \"geometry\",\n        stylers: [{ color: \"#c8c8c8\" }]\n    },\n    {\n        featureType: \"poi\",\n        elementType: \"labels.text.fill\",\n        stylers: [{ color: \"#111111\" }, { visibility: \"simplified\" }]\n    },\n    {\n        featureType: \"poi.park\",\n        elementType: \"geometry.fill\",\n        stylers: [{ color: \"#c8c8c8\" }]\n    },\n    {\n        featureType: \"poi.park\",\n        elementType: \"labels.text.fill\",\n        stylers: [{ color: \"#111111\" }]\n    },\n    {\n        featureType: \"poi.business\",\n        stylers: [{ visibility: \"off\" }]\n    },\n    {\n        featureType: \"road\",\n        elementType: \"geometry\",\n        stylers: [{ color: \"#aaaaaa\" }]\n        // stylers: [{color: '#ff0000'}]\n    },\n    {\n        featureType: \"road.arterial\",\n        elementType: \"geometry\",\n        stylers: [{ color: \"#999999\" }]\n        // stylers: [{color: '#ff0000'}]\n    },\n    {\n        featureType: \"road.highway\",\n        elementType: \"geometry\",\n        stylers: [{ color: \"#666666\" }]\n        // stylers: [{color: '#ff0000'}]\n    },\n    {\n        featureType: \"road.highway\",\n        elementType: \"geometry.stroke\",\n        stylers: [{ visibility: \"off\" }]\n    },\n    {\n        featureType: \"road.highway.controlled_access\",\n        elementType: \"geometry\",\n        stylers: [{ color: \"#444444\" }]\n    },\n    {\n        featureType: \"road.highway.controlled_access\",\n        elementType: \"geometry.stroke\",\n        stylers: [{ visibility: \"off\" }]\n    },\n    {\n        featureType: \"road.local\",\n        elementType: \"labels.text.fill\",\n        stylers: [{ color: \"#111111\" }]\n    },\n    {\n        featureType: \"transit.line\",\n        elementType: \"geometry\",\n        stylers: [{ color: \"#c8c8c8\" }]\n    },\n    {\n        featureType: \"transit.line\",\n        elementType: \"labels.text.fill\",\n        stylers: [{ color: \"#111111\" }]\n    },\n    {\n        featureType: \"transit.line\",\n        elementType: \"labels.text.stroke\",\n        stylers: [{ visibility: \"off\" }]\n    },\n    {\n        featureType: \"transit.station\",\n        elementType: \"geometry\",\n        stylers: [{ color: \"#c8c8c8\" }]\n    },\n    {\n        featureType: \"water\",\n        elementType: \"geometry.fill\",\n        stylers: [{ color: \"#222222\" }]\n    },\n    {\n        featureType: \"water\",\n        elementType: \"labels.text.fill\",\n        stylers: [{ color: \"#222222\" }]\n    }\n];\n\n},{}]},{},[4])\n\n","/// <reference types=\"@types/markerclustererplus\" />\nimport {} from \"google-maps\";\nimport * as styledMap from \"./styledMap\";\nimport { listenForDrawing } from \"./drawing\";\n\nimport { customGradient } from \"./gradient\";\nimport { mapNumber } from \"./mapNumber\";\n\nlet this_map: google.maps.Map;\nlet london: google.maps.LatLng;\nlet dark_theme: boolean = true;\nlet markers: google.maps.Marker[] = [];\nlet infoWindow: google.maps.InfoWindow;\n\nlet masts: string[][];\nlet mastsVisible: boolean = false;\n\nlet heatmap: google.maps.visualization.HeatmapLayer;\n\nlet lettings: string[][];\n\nlet showLonely: boolean = false;\nlet otherGeoJson: any;\nlet markerClusterer: MarkerClusterer;\nlet clust_num: number;\nlet prevalence: string;\n\nlet clustersVisible: boolean = false;\nlet heatmapVisible: boolean = false;\n\nlet heatmap_radius: number = 20;\n\nlet viewReady: boolean = false;\n\nexport function FunWithMaps(map: google.maps.Map) {\n  this_map = map;\n  london = coords(51.561638, -0.14);\n  let darkmap = new google.maps.StyledMapType(\n    styledMap.styledMap as google.maps.MapTypeStyle[],\n    {\n      name: \"Dark Map\"\n    }\n  );\n\n  map.setCenter(london);\n  map.mapTypes.set(\"dark_map\", darkmap);\n  map.setMapTypeId(\"dark_map\");\n\n  map.controls[google.maps.ControlPosition.LEFT_TOP].push(\n    document.getElementById(\"controls\")\n  );\n  map.controls[google.maps.ControlPosition.LEFT_BOTTOM].push(\n    document.getElementById(\"legend\")\n  );\n  map.controls[google.maps.ControlPosition.TOP_RIGHT].push(\n    document.getElementById(\"drawingControls\")\n  );\n  map.controls[google.maps.ControlPosition.RIGHT_BOTTOM].push(\n    document.getElementById(\"katlink\")\n  );\n\n  listenForDrawing(map);\n  loadAllMarkers(map);\n  loadHeatmapData();\n  loadGeoJson(map);\n}\n\nfunction coords(x: number, y: number) {\n  return new google.maps.LatLng(x, y);\n}\n\nfunction loadAllMarkers(map: google.maps.Map): void {\n  let antenna: google.maps.Icon = {\n    url: \"assets/img/antennabl.png\",\n    scaledSize: new google.maps.Size(40, 40)\n  };\n  fetch(\"assets/data/masts.json\")\n    .then(response => {\n      return response.json();\n    })\n    .then((response_masts: { meta: {}; data: string[][] }) => {\n      masts = response_masts.data;\n      masts.map((x: string[]) => {\n        let marker = new google.maps.Marker({\n          position: new google.maps.LatLng(\n            parseFloat(x[18]),\n            parseFloat(x[17])\n          ),\n          icon: antenna\n        });\n        infoWindow = new google.maps.InfoWindow();\n        marker.addListener(\"click\", e => {\n          infoWindow.setPosition(e.latLng);\n          infoWindow.setContent(`<p>${x[14]}</p>`);\n          infoWindow.open(map, marker);\n        });\n        markers.push(marker);\n      });\n    })\n    .catch(error => {\n      console.log(error, \"Error loading asset\");\n    });\n}\n\nexport function city(city: string) {\n  if (city === \"lon\") {\n    this_map.setCenter(coords(51.561638, -0.14));\n  }\n  if (city === \"man\") {\n    this_map.setCenter(coords(53.52476717517185, -2.5434842249308414));\n  }\n}\n\nexport function changeType() {\n  if (!dark_theme) {\n    this_map.setMapTypeId(\"dark_map\");\n  } else {\n    this_map.setMapTypeId(\"roadmap\");\n  }\n  dark_theme = !dark_theme;\n}\nexport function toggleMasts(): void {\n  if (!mastsVisible) {\n    markers.map(marker => {\n      marker.setMap(this_map);\n    });\n  } else {\n    markers.map(marker => {\n      marker.setMap(null);\n    });\n  }\n  mastsVisible = !mastsVisible;\n}\n\nfunction loadHeatmapData() {\n  fetch(\"assets/data/letting.json\")\n    .then(response => {\n      return response.json();\n    })\n\n    .then((data: { meta: {}; data: string[][] }) => {\n      lettings = data.data;\n      let heatmapData: {}[] = [];\n      lettings.map((x: string[]) => {\n        if (x[24] && x[23]) {\n          heatmapData.push({\n            location: new google.maps.LatLng(\n              parseFloat(x[24]),\n              parseFloat(x[23])\n            ),\n            weight: parseInt(x[15], 10)\n          });\n        }\n      });\n      heatmap = new google.maps.visualization.HeatmapLayer({\n        data: heatmapData\n      });\n      heatmap.set(\"gradient\", customGradient);\n      heatmap.set(\"radius\", 40);\n      heatmap.set(\"opacity\", 1);\n    })\n    .catch(error => {\n      console.log(error);\n    });\n}\nfunction loadGeoJson(map: google.maps.Map) {\n  map.data.loadGeoJson(\"assets/data/lonely.geojson\");\n  map.data.addListener(\"mouseover\", e => {\n    showLonely = true;\n    prevalence = e.feature.getProperty(\"PREVALENCE\");\n  });\n  map.data.addListener(\"mouseout\", e => {\n    showLonely = false;\n  });\n  map.data.setStyle(feature => {\n    let lon = feature.getProperty(\"PREVALENCE\");\n    let value = 255 - Math.round(mapNumber(lon, 0, 5, 0, 255));\n    let color = \"rgb(\" + value + \",\" + value + \",\" + 0 + \")\";\n    return {\n      fillColor: color,\n      strokeWeight: 1\n    };\n  });\n  infoWindow = new google.maps.InfoWindow();\n  map.data.addListener(\"click\", e => {\n    infoWindow.setPosition(e.latLng);\n    infoWindow.setContent(`<div class=\"overlay\">\n    <p><b>Prevalence factor of Loneliness of those over the age of 65: </b>\n      ${e.feature.getProperty(\"PREVALENCE\")}</p></div>`);\n    infoWindow.open(map);\n  });\n}\n\n// toggleClusters(): void {\n//   if (!clustersVisible) {\n//     markerClusterer = new MarkerClusterer(map, markers, {\n//       imagePath: \"assets/img/m\"\n//     });\n//     markerClusterer.setGridSize(10);\n//   } else {\n//     markerClusterer.clearMarkers();\n//   }\n//   clustersVisible = !clustersVisible;\n// }\n// toggleHeatmap(): void {\n//   if (heatmapVisible) {\n//     heatmap.setMap(null);\n//   } else {\n//     heatmap.setMap(map);\n//   }\n//   heatmapVisible = !heatmapVisible;\n// }\n// changeCluster(): void {\n//   clustersVisible = true;\n//   if (markerClusterer) {\n//     markerClusterer.clearMarkers();\n//   }\n//   markerClusterer = new MarkerClusterer(map, markers, {\n//     imagePath: \"assets/img/m\"\n//   });\n//   markerClusterer.setGridSize(clust_num);\n// }\n// changed() {\n//   heatmap.set(\"radius\", heatmap_radius);\n// }\n","/**\n * It maps a number to a range\n *\n * x is the number we want to map\n *\n * in_min - in_max is the range the numer is in\n *\n * out_min - out_max is the range we want to map the number to\n *\n * */\n\nexport function mapNumber(\n  x: number,\n  in_min: number,\n  in_max: number,\n  out_min: number,\n  out_max: number\n) {\n  return ((x - in_min) * (out_max - out_min)) / (in_max - in_min) + out_min;\n}\n","export function loadMapScript(libraries: string, c: Function): void {\n  console.log(\"hey there\");\n  if (!document.getElementById(\"gmap\")) {\n    const script = document.createElement(\"script\");\n    script.type = \"text/javascript\";\n    script.src =\n      \"https://maps.googleapis.com/maps/api/js?key=AIzaSyCrJXi-qaWm9FtOLL0h3xO_kfORit6WS2s\";\n    if (libraries && libraries.length > 0) {\n      script.src = script.src + \"&libraries=\" + libraries;\n    }\n    script.id = \"gmap\";\n    script.addEventListener(\n      \"load\",\n      e => {\n        console.log(\"loaded\");\n        c(e);\n      },\n      false\n    );\n    document.body.appendChild(script);\n  }\n}\n","export const styledMap = [\n  { elementType: \"geometry\", stylers: [{ color: \"#9a9a9a\" }] },\n  { elementType: \"labels.text.fill\", stylers: [{ color: \"#111111\" }] },\n  { elementType: \"labels.text.stroke\", stylers: [{ visibility: \"off\" }] },\n  {\n    featureType: \"administrative\",\n    elementType: \"geometry.stroke\",\n    stylers: [{ color: \"#c8c8c8\" }]\n  },\n  {\n    featureType: \"administrative.land_parcel\",\n    elementType: \"geometry.stroke\",\n    stylers: [{ color: \"#c8c8c8\" }]\n  },\n  {\n    featureType: \"administrative.land_parcel\",\n    elementType: \"labels.text.fill\",\n    stylers: [{ color: \"#c8c8c8\" }]\n  },\n  {\n    featureType: \"landscape.natural\",\n    elementType: \"geometry\",\n    stylers: [{ color: \"#c8c8c8\" }]\n  },\n  {\n    featureType: \"poi\",\n    elementType: \"geometry\",\n    stylers: [{ color: \"#c8c8c8\" }]\n  },\n  {\n    featureType: \"poi\",\n    elementType: \"labels.text.fill\",\n    stylers: [{ color: \"#111111\" }, { visibility: \"simplified\" }]\n  },\n  {\n    featureType: \"poi.park\",\n    elementType: \"geometry.fill\",\n    stylers: [{ color: \"#c8c8c8\" }]\n  },\n  {\n    featureType: \"poi.park\",\n    elementType: \"labels.text.fill\",\n    stylers: [{ color: \"#111111\" }]\n  },\n  {\n    featureType: \"poi.business\",\n    stylers: [{ visibility: \"off\" }]\n  },\n  {\n    featureType: \"road\",\n    elementType: \"geometry\",\n    stylers: [{ color: \"#aaaaaa\" }]\n    // stylers: [{color: '#ff0000'}]\n  },\n  {\n    featureType: \"road.arterial\",\n    elementType: \"geometry\",\n    stylers: [{ color: \"#999999\" }]\n    // stylers: [{color: '#ff0000'}]\n  },\n  {\n    featureType: \"road.highway\",\n    elementType: \"geometry\",\n    stylers: [{ color: \"#666666\" }]\n    // stylers: [{color: '#ff0000'}]\n  },\n  {\n    featureType: \"road.highway\",\n    elementType: \"geometry.stroke\",\n    stylers: [{ visibility: \"off\" }]\n  },\n  {\n    featureType: \"road.highway.controlled_access\",\n    elementType: \"geometry\",\n    stylers: [{ color: \"#444444\" }]\n  },\n  {\n    featureType: \"road.highway.controlled_access\",\n    elementType: \"geometry.stroke\",\n    stylers: [{ visibility: \"off\" }]\n  },\n  {\n    featureType: \"road.local\",\n    elementType: \"labels.text.fill\",\n    stylers: [{ color: \"#111111\" }]\n  },\n  {\n    featureType: \"transit.line\",\n    elementType: \"geometry\",\n    stylers: [{ color: \"#c8c8c8\" }]\n  },\n  {\n    featureType: \"transit.line\",\n    elementType: \"labels.text.fill\",\n    stylers: [{ color: \"#111111\" }]\n  },\n  {\n    featureType: \"transit.line\",\n    elementType: \"labels.text.stroke\",\n    stylers: [{ visibility: \"off\" }]\n  },\n  {\n    featureType: \"transit.station\",\n    elementType: \"geometry\",\n    stylers: [{ color: \"#c8c8c8\" }]\n  },\n  {\n    featureType: \"water\",\n    elementType: \"geometry.fill\",\n    stylers: [{ color: \"#222222\" }]\n  },\n  {\n    featureType: \"water\",\n    elementType: \"labels.text.fill\",\n    stylers: [{ color: \"#222222\" }]\n  }\n];\n"]}